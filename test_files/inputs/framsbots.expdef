expdef:
name:Framsbots - Game
info:~
Framsbots is a simple game inspired by the classic Robots game.
The aim of this game is to run away from hostile creatures and make all of them hit each other.
Just click somewhere (left-click or double-right-click) to move your creature (the one that is in the middle of the world in the beggining). Your creature will go towards the point you clicked.
All the enemies will move towards you. Use this information to make them hit each other, so they will loose energy and die.
If you see an apple, try to get it. You will gain energy and you may even get a new life!
Use shift+left mouse drag to rotate world.

Read more about this game:
http://www.framsticks.com/wiki/FramsBots

~
code:~

//Author: Bartosz Szopka @ Poznan University of Technology, 2007

//TODO
//consider using Creature(sGroup).nosim for creatures/groups of objects that do not need to be simulated (are dead) to speed things up
//consider using short, simple sounds (not too long, as playing tones is synchronous)




// coordinates of last clicked point
global click_point;

// //////////////////////////
// Initialization

// descriptions of a creatures that can be used in a game
global creatures;

function initCreatures()
{
  // define available creatures
  // fields in an creature array are:
  // 1: name,
  // 2: genotype,
  // 3: index of a bend muscle,
  // 4: weight of distance to target when computing bend signal
  // 5: weight of current bend state when computing new one
  creatures = [];
  creatures.add( ["Worm",
                  "fffX(fffIX[S1:1.017], RRlFFFMMMX[|-1:-10,3:9.501,in:0]llllFFMMMX[|1:-7.207]RlllFFFMMMX[|G:-5.088], fffIX[S1:1.145])",
                  3,
                  1.0 / 50,
                  9.0]
               );
  creatures.add(["4 Legs",
                 "lllfffX[0:2.420, 2:-2, 1:-1][-1:1, 0:1, 0:-1][-1:1](RRlllfffMMMX[|-1:-10]lllFFFMMMX[|-2:-1], fffIXlllfffMMMsX[|6:10, 3:-10](RRlllfffMMMIX[|-4:-10]lllFFFMMMIX[|-5:-1][S:1], , RRlllfffMMMIX[|-7:10]lllFFFMMMIX[|-8:-1][S:1]), RRlllfffMMMX[|-10:10]lllFFFMMMX[|-11:-1.784])",
                 8,
                 1.0 / 50,
                 0.0]
               );
}

function getCreature(index)
{
  if (index == -1)
    index = Math.random(creatures.size);
  return creatures[index];
}

@include "framsbots-levels.inc"

function onExpDefLoad()
{
  initCreatures();
  initLevels();

  // define genotype and creature groups
  var pop=Populations[0];
  pop.name = "Enemies";
  pop.nnsim = 0;
  pop.enableperf = 1;
  pop.death = 0;
  pop.energy = 1;
  pop.selfmask = 0x10001; pop.othermask = 0x30000;

  pop=Populations.addGroup("Player");
  pop.nnsim = 1;
  pop.enableperf = 1;
  pop.death = 0;
  pop.energy = 1;
  pop.selfmask = 0x20002; pop.othermask = 0x50000;

  pop=Populations.addGroup("Food");
  pop.nnsim = 0;
  pop.enableperf = 0;
  pop.death = 1;
  pop.energy = 1;
  pop.selfmask = 0x40004; pop.othermask = 0x20004;
}

function onExpInit()
{
  ExpState.lifes = 3;
  click_point = [0.0, 0.0];

  initLevel();
}

function initLevel()
{
  Populations[0].clear();
  Populations[1].clear();
  Populations[2].clear();

  Populations[0].nnsim = 0;

  var levelNumber;
  if (ExpProperties.level == -1)
    levelNumber = Math.random(levels.size);
  else
    levelNumber = ExpProperties.level;

  var level = levels[levelNumber];
  printState("Level #" + (levelNumber + 1) + ": " + level[0]);

  World.wrldbnd = level[2];
  World.wrldsiz = level[1];
  World.wrldwat = -1;
  World.wrldtyp = level[3];
  World.wrldmap = level[4];

  World.wrldchg();

  ExpProperties.enemiesCount = level[5];
  ExpProperties.collisionFreeze = level[6];

  ExpProperties.enemyCreature = level[7];
  ExpProperties.playerCreature = level[8];

  createPlayer();
  createEnemies();
}

function createPlayer()
{
  print("Creating Player creature...");
  var c = Populations[1].add(getCreature(ExpProperties.playerCreature)[1]);
  c.name = "Player";
  c.data->creature_info = getCreature(ExpProperties.playerCreature);
  c.data->history = [];
  c.idleen = 0;
  c.energy0 = ExpProperties.playerEnergy0;
  c.energy = c.energy0;
  c.nnenabled = 0;
}

function createEnemies()
{
  ExpState.livingEnemies = 0;
  var pop=Populations[0];
  while (pop.size < ExpProperties.enemiesCount)
  {
    ExpState.livingEnemies++;
    print("Creating Enemy creature #" + ExpState.livingEnemies);
    var creature = getCreature(ExpProperties.enemyCreature);
    var enemy = pop.add(creature[1]);
    enemy.name = "Enemy #" + ExpState.livingEnemies;
    enemy.data->creature_info = creature;
    enemy.data->history = [];
    enemy.idleen = 0;
    enemy.energy0 = ExpProperties.enemyEnergy0;
    enemy.energy = enemy.energy0;
  }
}

function createFood()
{
  var food = Populations[2].add("//0\nm:Vstyle=food\np:");

  food.name = "Apple";
  food.idleen = ExpProperties.foodIdleEnergy;
  food.energy0 = ExpProperties.foodEnergy0;
  food.energy = food.energy0;
  food.nnenabled = 0;
}

function onBorn(cr)
{
  // place newly born creature

  var retry = 50; //try 50 times
  var placed_ok = 0;
  while (retry-- && !placed_ok)
  {
    switch (cr.population.index)
    {
    case 0:
      place_centerhead(cr);
      break;
    case 1:
      place_centered(cr);
      break;
    case 2:
      place_centerhead(cr);
      break;
    }

    if (!cr.boundingBoxCollisions(0))
      placed_ok = 1;
  }
  if (!placed_ok)
    print("onBorn() could not avoid collisions.");
}

function place_centered(cr)
{
  var x, y, z;
  cr.rotate(0, 0, Math.pi4 * Math.random(8));

  x = (World.wrldsiz - cr.bboxSize.x) / 2;
  y = (World.wrldsiz - cr.bboxSize.y) / 2;
  z = WorldMap.getHeight(x, y);

  if (World.simtype == 1)
    z += 0.2;
  cr.locationSetBboxLow(x, y, z - 0.999);
  return ;
}


function place_centerhead(cr)
{
  var x, y, z;
  // place creatures only where world level = 0
  // remember about it when creating maps for levels!!!
  do
  {
    x = (World.wrldsiz - cr.bboxSize.x) * Math.rnd01 - cr.bboxSize.x / 2;
    y = (World.wrldsiz - cr.bboxSize.y) * Math.rnd01 - cr.bboxSize.y / 2;

    z = WorldMap.getHeight(x, y);
  }
  while (z != 0);

  var hx = float(World.wrldsiz / 2) - x;
  var hy = float(World.wrldsiz / 2) - y;
  var alpha_rad = vectorsAngle([1.0, 0.0], [hx, hy]);

  cr.rotate(0, 0, alpha_rad);
  cr.locationSetBboxLow(x, y, z - 0.999);

  return ;
}

function getPlayer()
{
  return Populations[1][0];
}

// //////////////////////////
// Mouse Click event

function queryEventNames()
{
  return ["Go there!"];
}

function onUserEvent(type, point, vector)
{
  var p = WorldMap.intersect(point, vector);
  if (p)
  {
    click_point = [p[0], p[1]];
    moveEnabled(1);
    print("Clicked point: [" + click_point[0] + ", " + click_point[1] + "]");
  }
  else
    print("no intersection...");
}

function onMouseClick(options, xy, point, vector)
{
  if (options & 1024) options-=1024;//ignore doubleclick

  if (options == 1)
  {
    onUserEvent(0, point, vector);
    return 1;
  }
  return 0;
}

// enables/disables move
// usage:
//   moveEnabled(0) to pause the game
//   moveEnabled(1) to resume
function moveEnabled(enabled)
{
  getPlayer().nnenabled = enabled;
  Populations[0].nnsim = enabled;
}

// ///////////////////////////////////////////////////
// Computing angle between walk and target vectors

function vectorsAngle(v1, v2)
{
  var x1 = v1[0];
  var y1 = v1[1];
  var l1 = Math.sqrt(x1 * x1 + y1 * y1);

  var x2 = v2[0];
  var y2 = v2[1];
  var l2 = Math.sqrt(x2 * x2 + y2 * y2);

  var vProduct = x1 * y2 - y1 * x2;
  var direction;

  if (vProduct >= 0)
    direction = 1.0;
  else
    direction = -1.0;

  var cosinus = (x1 * x2 + y1 * y2) / (l1 * l2);
  var angle = Math.acos(cosinus);

  print("Vector1: [" + x1 + ", " + y1 + "] Vector2: " + x1 + ", " + y1 + "] " +
        "Angle: " + (180.0 * angle / Math.pi) + " Direction: " + direction);

  return direction * angle;
}

function saveCreaturePosition(creature)
{
  // only update history of creatures that are moving
  if (creature.nnenabled && creature.population.nnsim)
  {
    if (creature.data->history == null)
      creature.data->history = [];

    // save creatures position in history vector
    creature.data->history.add([creature.bboxCenter.x, creature.bboxCenter.y]);
    // if history vector is too long remove oldest position
    while (creature.data->history.size > ExpProperties.historyLength)
      creature.data->history.remove(0);
  }
}

function updateCreatureBend(creature, target_x, target_y)
{
  var neuronIndex = creature.data->creature_info[2];

  if (creature.data->history.size == ExpProperties.historyLength)
  {
    var distanceWeight = creature.data->creature_info[3];
    var currStateWeight = creature.data->creature_info[4];

    var azimuth_x = target_x - creature.bboxCenter.x;
    var azimuth_y = target_y - creature.bboxCenter.y;
    var azimuth_dist = Math.sqrt(azimuth_x * azimuth_x + azimuth_y * azimuth_y);

    var walk_x = creature.bboxCenter.x - creature.data->history[0][0];
    var walk_y = creature.bboxCenter.y - creature.data->history[0][1];

    var angle = vectorsAngle([walk_x, walk_y], [azimuth_x, azimuth_y]);
    var signal = Math.sin(angle / 2);
    var scale = (distanceWeight * azimuth_dist) + 1;

    var signal = signal / scale;

    creature.getNeuro(neuronIndex ).hold = 1;
    creature.getNeuro(neuronIndex ).currState = (currStateWeight * creature.getNeuro(neuronIndex).state + signal) / (currStateWeight + 1.0);
  }
  else
  {
    creature.getNeuro(neuronIndex ).hold = 1;
    creature.getNeuro(neuronIndex ).currState = 0;
  }
}


// ////////////////////////////////
// Simulation steps

function onStep()
{
  var i = 0;
  // for every Enemy
  var enemies = Populations[0];
  for (i = 0; i < enemies.size; i++)
  {
    var enemy = enemies[i];
    saveCreaturePosition(enemy);
    updateCreatureBend(enemy, getPlayer().bboxCenter.x, getPlayer().bboxCenter.y);
  }

  // if enemy is alone it slowly dies...
  if ((ExpState.livingEnemies == 1) && (enemies.nnsim))
  {
    for (i = 0; i < enemies.size; i++)
    {
      if (enemies[i].nnenabled)
      {
        enemies[i].energy -= ExpProperties.enemyAloneDamage / 1000.0;
        checkEnemyState(enemies[i]);
      }
    }
  }

  // check the distance between player and click point
  var dx = getPlayer().bboxCenter.x - click_point[0];
  var dy = getPlayer().bboxCenter.y - click_point[1];
  var dist = Math.sqrt(dx * dx + dy * dy);

  if (dist <= 1.0)
  {
    // freeze player creature near click point
    getPlayer().nnenabled = 0;
  }
  else
  {
    saveCreaturePosition(getPlayer());
    updateCreatureBend(getPlayer(), click_point[0], click_point[1]);
  }

  checkGameState();
}

function checkGameState()
{
  if (getPlayer().energy < 0)
  {
    // life lost
    if (ExpState.lifes > 0)
    {
    ExpState.lifes--;

    if (ExpState.lifes <= 0)
    {
      // game over
      printState("Game Over!");
      Simulator.stop();
      return ;
    }
    else
    {
      // relaunch level
      initLevel();
      return ;
    }
    }
  }

  if (ExpState.livingEnemies == 0)
  {
    if (ExpProperties.level == levels.size - 1)
    {
      // game finished
      printState("You win!");
      Simulator.stop();
      return ;
    }
    else
    {
      // next level
      nextLevel();
      initLevel();
      return ;
    }
  }
}

function printState(msg)
{
  ExpState.banner = msg;
  Simulator.print(ExpState.banner);
}

function print(msg)
{
  if (ExpProperties.debug)
    Simulator.print(msg);
}

// ////////////////////////////
// Collisions

function onPlayerCrCollision()
{
  // frozen Enemies also hurt, but slower
  var scale = float(CrCollision.Creature2.nnenabled) * ExpProperties.enemyPlayerDamage
              + float(!CrCollision.Creature2.nnenabled) * ExpProperties.enemyFrozenPlayerDamage;

  var e = scale * 0.5; /*Collision.Part2.ing not allowed in this handler*/

  print("Player damage: " + e + " by " + CrCollision.Creature2.name);
  CrCollision.Creature1.transferEnergyTo(CrCollision.Creature2,e);
}

function onFoodCollision()
{
  // eat an apple
  var e = Collision.Part2.ing * 100;
  print("A bit of an apple: " + e);
  Collision.Creature1.transferEnergyTo(Collision.Creature2,e);
}

function onDied(cr)
{
  if (cr.population.index != 2)
    return ;
  // just for apples

  if (getPlayer().energy > getPlayer().energy0)
  {
    // if apple eaten and enough energy then gain life
    ExpState.lifes++;
    getPlayer().energy -= getPlayer().energy0;
    print("Additional life gained! Current lifes: " + ExpState.lifes);
  }
}

function onEnemiesCrCollision()
{
  var c1 = CrCollision.Creature1;
  var c2 = CrCollision.Creature2;

  // check if both creatures are Enemies and at least one of them is not frozen
  if ((c1.population == c2.population) && (c1.nnenabled || c2.nnenabled))
  {
    var e =  /*Collision.Part2.ing * Collision.Part1.ing */ 0.125 * ExpProperties.enemyEnemyDamage;
    print("Collision between " + c1.name + " and " + c2.name + "; Energy taken: " + e );
    c1.energy -= e;
    c2.energy -= e;
    checkEnemyState(c1);
    checkEnemyState(c2);
  }

  // trying to avoid collisions of frozen creatures
  // because it slows down the simulation
  //
  // this solution looks quite strange during the game
  // that's why I commented it
  //
  //if((c1.group == c2.group) && (!c1.nnenabled) && (!c2.nnenabled)){
  //  var x = c1.bboxCenter.x - c2.bboxCenter.x;
  //  var y = c1.bboxCenter.y - c2.bboxCenter.y;
  //  var d = Math.sqrt(x*x + y*y);
  //  x = 0.0 + x / d;
  //  y = 0.0 + y / d;
  //
  //  c1.locationMoveBy(x * c1.bboxSize.x, y * c1.bboxSize.y, 0);
  //  c2.locationMoveBy(-x * c2.bboxSize.x, -y * c2.bboxSize.y, 0);
  //}
}

function checkEnemyState(enemy)
{
  if (ExpProperties.collisionFreeze)
  {
    // freeze creature with energy < 0
    if ((enemy.nnenabled) && (enemy.energy <= 0))
    {
      enemy.nnenabled = 0;
      enemyKilled();
    }
  }
  else
  {
    // or kill creatures with energy < 0
    if (enemy.energy <= 0)
    {
      enemy.population.kill(enemy.index);
      enemyKilled();
    }
  }
}

function enemyKilled()
{
  // count living enemies
  ExpState.livingEnemies = 0;
  var i;
  var pop=Populations[0];
  for (i = 0; i < pop.size; i++)
  {
    if (pop[i].nnenabled)
      ExpState.livingEnemies++;
  }
  if (Math.rndUni(0.0, 1.0) <= ExpProperties.foodProbability)
    createFood();
}

// ////////////////////////////
// ExpProperties setters

function ExpProperties_enemiesCount_set()
{
  var pop=Populations[0];

  while (pop.size > ExpProperties.enemiesCount)
    pop.delete(Math.random(pop.size));

  enemyKilled();
}

function ExpProperties_level_set()
{
  initLevel();
}
~

# ################################
# Enemies

property:
id:enemyCreature
name:Enemy creature type
type:d -1 1 -1 ~Random~Worm~4 Legs

property:
id:enemiesCount
name:Number of enemy creatures
type:d 0 50 10
group:Enemies

property:
id:enemyEnergy0
name:Starting energy of enemy creature
type:f 0 1000 300
group:Enemies
help:Base starting energy level

property:
id:enemyPlayerDamage
name:Multiplier of energy taken by Enemy
type:f 0 10 2
group:Enemies

property:
id:enemyFrozenPlayerDamage
name:Multiplier of energy taken by frozen Enemy
type:f 0 10 1
group:Enemies

property:
id:enemyEnemyDamage
name:Multiplier of energy taken when Enemies collide
type:f 0 100 5
group:Enemies

property:
id:enemyAloneDamage
name:Multiplier of energy taken from alone Enemy
type:f 0 100 40
group:Enemies


property:
id:collisionFreeze
name:What to do when Enemies die
type:d 0 1 1 ~Kill~Freeze
group:Enemies

# ################################
# Player

property:
id:playerCreature
name:Player creature type
type:d -1 1 1 ~Random~Worm~4 Legs

property:
id:playerEnergy0
name:Starting energy of player creature
type:f 0 1000 500
group:Player
help:Base starting energy level

# ################################
# Food

property:
id:foodEnergy0
name:Starting energy of food
type:f 0 1000 500
group:Food
help:Base starting energy level

property:
id:foodIdleEnergy
name:Amount of energy lost 
type:f 0 10 0.03
group:Food
help:How much energy food looses each step

property:
id:foodProbability
name:Food probablity
type:f 0 1 0.1
group:Food
help:Probability of food appearing after enemy killed

# ################################
# Azimuth - walk history

property:
id:historyLength
name:Maximum length of positions history vectors
type:d 2 1000 200
group:Azimuth

# ################################
# Other

property:
id:level
name:Level
type:d -1 7 0
help:Number of a level to play (-1 is random)

property:
id:debug
name:Show additional debug messages
type:d 0 1 0

# used to be global variables, now in ExpState
state:
id:banner
name:Banner
type:s
flags:16
help:banner to be used by Theater

state:
id:lifes
name:Lifes
type:d
flags:16

state:
id:livingEnemies
name:Number of living enemies
type:d
flags:16
