style:
name:Standard
info:Default Framsticks visual style
code:~

@include "stdneurons.inc"
@include "simplefont.inc"
@include "plane3d.inc" //for createPlaneVertices()

function default_model_build()
{
Element.useCreature();
if (Creature.numjoints>0)
	VisualModel.jointshadow = 0.01*VisProperties.joint_width*VisProperties.shadows;
else
	VisualModel.partshadow = 0.2*VisProperties.shadows;

if (Creature.population)
{ //in world
if (VisProperties.shownames)
  {
  GeomBuilder.addTransform(VisualModel.rootNode);
  VertexBuilder.newLines();
  var t=makeVectorText(Creature.name,0.0,0.0,5.0,0.2,0.4,0.06);
  VertexBuilder.addVertex([0,0,1,0,0,4.5,-1,0,2,0,0,1,0,0,1,1,0,2]);
  VertexBuilder.addVertex(t);
  VertexBuilder.addColor(0xff0000ff);
  Material.new();
  Material.setFlat();
  Material.colormat = GL.AMBIENT_AND_DIFFUSE;
  Material.disable(GL.TEXTURE_2D);
  Material.disable(GL.LIGHTING);
  VertexBuilder.material = Material.object;
  GeomBuilder.add(VertexBuilder.node);
  }
}
else
  { //in body view
  if (VisProperties.symmetryplane==0) return;
  
  VertexBuilder.newQuads();
  var minx=Creature.pos_x;
  var miny=Creature.pos_y;
  var minz=Creature.pos_z;
  var maxx=minx+Creature.size_x;
  var maxy=miny+Creature.size_y;
  var maxz=minz+Creature.size_z;

  //we use a quick, inaccurate mode to just guess the symmetry plane
  //save original parameters
  var olda=ModelSymmetry.symAlphaSteps;
  var oldb=ModelSymmetry.symBetaSteps;
  var oldp=ModelSymmetry.symPosSteps;
  
  //time complexity of ModelSymmetry.calculateSymmetry() is O(alphaSteps*betaSteps*posSteps * sticks^2*log(sticks))
  var sticks=Creature.model.numjoints;
  
  /* set low-quality parameters to quickly guess symmetry plane
  1. stepsAlpha = stepsBeta
  2. stepsAlpha >= 2
  3. posSteps >= 2
  angles are probably more important than posSteps, but hard to say how much (2, 3 times?) 
  so let's divide angles by sqrt(sticks), and pos by sticks. log(sticks) in time complexity stays not depreciated */
  ModelSymmetry.symAlphaSteps=Math.max(2.0,20.0/Math.sqrt(sticks));
  ModelSymmetry.symBetaSteps=ModelSymmetry.symAlphaSteps;
  ModelSymmetry.symPosSteps=Math.max(2,10/sticks);
  
  //calculate
  var symmetry=ModelSymmetry.calculateSymmetry(Creature.model);
  //Simulator.print("Estimated planar symmetry of '%s' for parameters (%g,%g,%g) is %g%%" % Creature.name % ModelSymmetry.symAlphaSteps % ModelSymmetry.symBetaSteps % ModelSymmetry.symPosSteps % symmetry*100); //could be printed in thater or gui, but theater's genotype viewer mode has neither CLI nor Simulator objects so we have no printing function
  
  //restore original parameters
  ModelSymmetry.symAlphaSteps=olda;
  ModelSymmetry.symBetaSteps=oldb;
  ModelSymmetry.symPosSteps=oldp;

  // createPlaneVertices([-0.305212, -0.939347, -0.156434], 0.0798513,
  createPlaneVertices([ModelSymmetry.symResultA, ModelSymmetry.symResultB, ModelSymmetry.symResultC], ModelSymmetry.symResultD,
      [minx, miny, minz], [maxx, maxy, maxz]);

  VertexBuilder.addColor(0xbb9999ff); //0xbb=transparent (alpha)
  VertexBuilder.twosided=1;
  Material.new();
  Material.setFlat();
  Material.translucent = 1;
  Material.colormat = GL.AMBIENT_AND_DIFFUSE;
  Material.disable(GL.TEXTURE_2D);
  Material.disable(GL.LIGHTING);
  Material.enable(GL.BLEND);
  VertexBuilder.material = Material.object;
  GeomBuilder.currentNode = VisualModel.rootNode;
  GeomBuilder.add(VertexBuilder.node);
  }
}

function food_model_build()
{
default_model_build();
if (Creature.numjoints==0)
	VisualModel.partshadow = VisProperties.shadows;
}

function manipulator_model_update()
{}

function updatetextlabel()
{
Element.useCreature();
if (VisProperties.shownames)
if (Creature.population)
{
var tr=GeomBuilder.getBranch(VisualModel.rootNode,0);
if (tr)
	{
	GeomBuilder.matrixReset();
	GeomBuilder.matrixMove(Creature.pos_x+Creature.size_x/2,Creature.pos_y+Creature.size_y/2,Creature.pos_z+Creature.size_z/2);
	GeomBuilder.setMatrix(tr);
	}
}
}

function default_model_update()
{
Element.useCreature();
if (Creature.energy0>0)
  {
  var e = Creature.energy / Creature.energy0;
  if (e > 2.0)
    e = 2.0;
  else if (e < 0.05)
    e = 0.05;
  VisualModel.brightness=e;
  }
updatetextlabel();
}

function food_model_update()
{
updatetextlabel();
}

function mark_model_build() //marks are vertical signs (bars), used for example in maze experiments
{
  VisualModel.partshadow = 0.4*VisProperties.shadows;
  var color=VisualModel.getArg("color");
  if (color!="") VisualModel.color=color;
}

function mark_model_update()
{}

function boid_part_build()
{
  loadAndAddAsTransformNode("bird.ac");
}

function default_part_build()
{
Element.useCreature();
Element.usePart();

switch(p.sh)
	{
	case 0:
	if (Creature.numjoints>0)
		{
		GeomBuilder.addTransform(GeomBuilder.rootNode);
		Element.node = GeomBuilder.currentNode;
		}
	else
		loadAndAddAsTransformNode("greenball.ac");
	break;

	case 1: //elipsoid
		loadAndAddAsTransformNode("greenball.ac");
		VisualModel.partshadow = VisProperties.shadows;
		Element.shadow=1;
		break;
	case 2: //cuboid
		loadAndAddAsTransformNode("boxpart_shape.ac");
		VisualModel.partshadow = VisProperties.shadows;
		Element.shadow=1;
		break;
	case 3: //cylinder
		loadAndAddAsTransformNode("cylpart_shape.ac");
		VisualModel.partshadow = VisProperties.shadows;
		Element.shadow=1;
		break;
	}

if (VisProperties.axes)
   {
   Loader.load("xyz.ac");
   if (Loader.loaded)
      {
      var sx=1.0,sy=1.0,sz=1.0;
      GeomBuilder.addTransform(GeomBuilder.currentNode);
      GeomBuilder.add(Loader.loaded);
      if (p.sh)
           { // the whole part element will be later re-scaled according to its shape scale, the transformation below partially counteracts this in order to get reasonable axes size
	   switch(p.sh)
	      {
	      case 1: sx=10.0*p.sx; sy=10.0*p.sy; sz=10.0*p.sz; break;
	      case 2: sx=p.sx; sy=p.sy; sz=p.sz; break;
	      case 3: sx=p.sx; sy=10.0*p.sy; sz=10.0*p.sz; break;
	      }
	   sx=Math.min(100.0,Math.max(0.01,sx));
	   sy=Math.min(100.0,Math.max(0.01,sy));
	   sz=Math.min(100.0,Math.max(0.01,sz));
	   GeomBuilder.matrixReset();
	   GeomBuilder.matrixScale(0.5/sx+0.5,0.5/sy+0.5,0.5/sz+0.5);
	   GeomBuilder.setMatrix(GeomBuilder.currentNode);
	   }
      }
   }

}

function loadAndAddAsTransformNode(filename)
{
  Loader.load(filename);
  if (Loader.loaded)
  {
    GeomBuilder.addTransform(GeomBuilder.rootNode);
    Element.node = GeomBuilder.currentNode;
    GeomBuilder.add(Loader.loaded);
  }
}

function manipulator_part_build()
{
  loadAndAddAsTransformNode("manip-close.ac");
}

function default_joint_build()
{
  Element.useJoint();
  if (j.sh==1)
    { //solid/invisible
    GeomBuilder.addTransform(GeomBuilder.rootNode);
    Element.node = GeomBuilder.currentNode;
    VisualModel.jointshadow = 0;
    }
  else
    {
  Element.useJointPart1();
  var as=p.as;
  Element.useJointPart2();
  as=(as+p.as)/2;
  var stick;
  if ((World.simtype==1)&&(ODE.odeshape==1))
	stick="boxstick_flat.ac";
  else
	stick="greenstick" + int(1.0+4.999*as) + ".ac";
  loadAndAddAsTransformNode(stick);
    }
}

function default_part_update()
{
  Element.useMechPart();
  Element.usePart();
  GeomBuilder.matrixReset();
  GeomBuilder.matrixPosition1(MechPart.pos);
  GeomBuilder.matrixOrient1(MechPart.orient);
  switch(p.sh)
    {
    case 1: //ellipsoid
      GeomBuilder.matrixScale(p.sx/0.2, p.sy/0.2, p.sz/0.2);
      break;
    case 2: //cuboid
      GeomBuilder.matrixScale(p.sx, p.sy, p.sz);
      break;
    case 3: //cylinder
      GeomBuilder.matrixScale(p.sx, p.sy/0.2, p.sz/0.2);
      break;
    }
  GeomBuilder.setMatrix(Element.node);
}

function food_part_build()
{
var file="apple.ac";
var color=VisualModel.getArg("color");
if (color!="") { file="applewhite.ac"; VisualModel.color=color; }
loadAndAddAsTransformNode(file);
}

function food_part_update()
{
  Element.useCreature();
  var e;
  if (Creature.energy0>0)
   {
   e = Creature.energy / Creature.energy0;
   if (e > 1.0)
    e = 1.0;
   else if (e < 0.05)
    e = 0.05;
   }
  else e=1.0;
  Element.useMechPart();
  GeomBuilder.matrixReset();
  if (World.simtype==0) GeomBuilder.matrixMove(0,0,-0.2);
  else GeomBuilder.matrixMove(0,0,-(1.0-e)*0.8);
  GeomBuilder.matrixMove1(MechPart.pos);
  GeomBuilder.matrixOrient1(MechPart.orient);
  if (e!=1.0) GeomBuilder.matrixScale(e, e, e);
  if (World.simtype==1) GeomBuilder.matrixMove(0,0,-0.8);
  GeomBuilder.setMatrix(Element.node);
  VisualModel.partshadow = e*VisProperties.shadows;
}

function mark_part_build()
{
  loadAndAddAsTransformNode("cube.ac");
}

function mark_part_update()
{
  Element.useMechPart();
  GeomBuilder.matrixReset();
  GeomBuilder.matrixMove1(MechPart.pos);
  GeomBuilder.matrixMove(0,0,2);
  GeomBuilder.matrixOrient1(MechPart.orient);
  Element.useCreature();
  GeomBuilder.matrixScale(0.3, 0.3, 3.0);
  GeomBuilder.setMatrix(Element.node);
}

function default_joint_update()
{
  Element.useJoint();
  if (j.sh==1) return;
  Element.useMechJointPart1();
  Element.useMechJoint();
  GeomBuilder.matrixReset();
  if ((World.simtype==1)&&(ODE.odeshape==1))
	{
  GeomBuilder.matrixOrient1(MechJoint.calcorient);
  GeomBuilder.matrixMove(MechPart.x-GeomBuilder.matrix00*0.2,MechPart.y-GeomBuilder.matrix01*0.2,MechPart.z-GeomBuilder.matrix02*0.2);
  GeomBuilder.matrixScale(MechJoint.length+0.4, 1, 1);
	}
  else
	{
  GeomBuilder.matrixMove1(MechPart.pos);
  GeomBuilder.matrixOrient1(MechJoint.calcorient);
  var width=0.01*VisProperties.joint_width;
  GeomBuilder.matrixScale(MechJoint.length,width,width);
        }
  GeomBuilder.setMatrix(Element.node);
}

function setScenePanorama(which)
{
  Scene.worldtexture = ["", "field_.png", "ocean_.png", "darkcity_.png"][which];
}

function world_build()
{
  Scene.backcolor = VisProperties.worldbgcolor;
  setScenePanorama(VisProperties.worldpan);

  if (VisProperties.hideworld) return;

  switch (World.wrldtyp)
  {
  case 0:
    buildFlatWorld();
    break;
  case 1:
    buildBlockWorld();
    break;
  case 2:
    buildSmoothWorld();
  }

  if (World.wrldbnd == 0)
  {
    buildFlatBoundary();
  }
  else
  {
    Loader.load("flyingworld3.ac");
    if (Loader.loaded==null)
      return ;
    GeomBuilder.addTransform(GeomBuilder.rootNode);
    GeomBuilder.matrixReset();
    var siz = World.wrldsiz / 20.0;
    GeomBuilder.matrixScale(siz, siz, siz);
    var z=-0.2;
    if (World.simtype) z=0.0;
    GeomBuilder.matrixMove(0, 0, z);
    GeomBuilder.setMatrix(GeomBuilder.currentNode);
    GeomBuilder.add(Loader.loaded);
  }

}

@include "stdblocks.inc"
@include "stdsmooth.inc"
@include "stdboundary.inc"

function buildFlatWorld()
{
  GeomBuilder.addBranch(GeomBuilder.rootNode);
  VertexBuilder.newQuads();
  var z = -0.2;
  if (World.simtype) z=0.0;
  VertexBuilder.addVertex([0.0, 0.0, z, World.wrldsiz, 0.0, z,
                           World.wrldsiz, World.wrldsiz, z, 0.0, World.wrldsiz, z]);
  VertexBuilder.addColor(0.85, 0.75, 0.55);
  VertexBuilder.addNormal(0, 0, 1);
  VertexBuilder.twosided=1;
  Material.new();
  Material.setFlat();
  Material.disable(GL.TEXTURE_2D);
  Material.disable(GL.BLEND);
  Material.enable(GL.LIGHTING);
  Material.enable(GL.COLOR_MATERIAL);
  Material.colormat=GL.AMBIENT_AND_DIFFUSE;
  Material.specular = 0;
  VertexBuilder.material = Material.object;
  GeomBuilder.add(VertexBuilder.node);
  buildWorldBoundary();
  buildWorldWater();
}

function buildFlatBoundary()
{
  var ma = World.wrldsiz * 2;
  var mi = 0.0 - World.wrldsiz;
  var si = World.wrldsiz;
  var z = -0.2;
  if (World.simtype) z=0.0;
  GeomBuilder.addBranch(GeomBuilder.rootNode);
  VertexBuilder.newQuads();
  VertexBuilder.addVertex([si, 0.0, z, ma, 0.0, z, ma, si, z, si, si, z,
                           0.0, si, z, si, si, z, si, ma, z, 0.0, ma, z,
                           mi, 0.0, z, 0.0, 0.0, z, 0.0, si, z, mi, si, z,
                           0.0, mi, z, si, mi, z, si, 0.0, z, 0.0, 0.0, z]);
  VertexBuilder.addColor(0.80, 0.70, 0.50);
  VertexBuilder.addNormal(0, 0, 1);
  VertexBuilder.twosided=1;
  Material.new();
  Material.setFlat();
  Material.specular = 0;
  Material.disable(GL.TEXTURE_2D);
  VertexBuilder.material = Material.object;

  GeomBuilder.add(VertexBuilder.node);
  GeomBuilder.addBranch(GeomBuilder.rootNode);
  VertexBuilder.newQuads();
  VertexBuilder.addVertex([si, si, z, ma, si, z, ma, ma, z, si, ma, z,
                           si, mi, z, ma, mi, z, ma, 0.0, z, si, 0.0, z,
                           mi, si, z, 0.0, si, z, 0.0, ma, z, mi, ma, z,
                           mi, mi, z, 0.0, mi, z, 0.0, 0.0, z, mi, 0.0, z]);
  VertexBuilder.addColor(0.85, 0.75, 0.55);
  VertexBuilder.addNormal(0, 0, 1);
  VertexBuilder.twosided=1;
  Material.new();
  Material.setFlat();
  Material.disable(GL.TEXTURE_2D);
  Material.specular = 0;
  VertexBuilder.material = Material.object;
  GeomBuilder.add(VertexBuilder.node);
}

function buildWorldWater()
{
  if (World.wrldwat < -5.0)
    return ;
  var mi = 0.0, ma = World.wrldsiz;
  var z = World.wrldwat;
  if (World.simtype==0) z-=0.2;
  if (World.wrldbnd == 0)
  {
    mi -= ma;
    ma += ma;
  }
  else
  {
    if (z > 0.0)
    {
      var z2=z+1.0;
      GeomBuilder.addBranch(GeomBuilder.rootNode);
      VertexBuilder.newLines();
      VertexBuilder.addVertex([mi, mi, z2, ma, mi, z2, ma, mi, z2, ma, ma, z2,
                               ma, ma, z2, mi, ma, z2, mi, ma, z2, mi, mi, z2,
                               mi, mi, z2, mi, mi, mi, mi, ma, z2, mi, ma, mi,
                               ma, ma, z2, ma, ma, mi, ma, mi, z2, ma, mi, mi]);
      VertexBuilder.addColor(0xff000000);
      Material.new();
      Material.setFlat();
      Material.disable(GL.TEXTURE_2D);
      Material.disable(GL.LIGHTING);
      Material.colormat = GL.AMBIENT_AND_DIFFUSE;
      VertexBuilder.material = Material.object;
      GeomBuilder.add(VertexBuilder.node);
    }
  }
  GeomBuilder.addBranch(GeomBuilder.rootNode);
  VertexBuilder.newQuads();
  VertexBuilder.addVertex([mi, mi, z, ma, mi, z, ma, ma, z, mi, ma, z]);
  VertexBuilder.addNormal(0.0, 0.0, 1.0);
  VertexBuilder.addColor(0x80ff8833);
  VertexBuilder.genTexCoordsXY(0.17, 0.17);
  VertexBuilder.twosided=1;
  Material.new();
  Material.setFlat();
  Material.enable(GL.TEXTURE_2D);
  Material.enable(GL.BLEND);
  Material.enable(GL.COLOR_MATERIAL);
  Material.disable(GL.LIGHTING);
  Material.translucent = 1;
  Material.texture = "waves.png";
  VertexBuilder.material = Material.object;
  GeomBuilder.add(VertexBuilder.node);
}

function VisProperties_set()
{
  VisualStyle.rebuild();
}

function modelviewer_build_empty()
{
  Scene.backcolor = VisProperties.bgcolor;
  setScenePanorama(VisProperties.modelpan);
}

// min.x/y/z = s6/5/4   max.x/y/z = s3/2/1
function modelviewer_build(minx, miny, minz, maxx, maxy, maxz)
{
  Scene.backcolor = VisProperties.bgcolor;
  setScenePanorama(VisProperties.modelpan);
  if (VisProperties.bbox)
  {
  VertexBuilder.newQuads();
  VertexBuilder.addVertex([minx, miny, minz, maxx, miny, minz, maxx, maxy, minz, minx, maxy, minz]);
  VertexBuilder.twosided=1;
  Material.new();
  Material.setFlat();
  Material.colormat = GL.AMBIENT_AND_DIFFUSE;
  Material.disable(GL.TEXTURE_2D);
  Material.disable(GL.LIGHTING);
  VertexBuilder.material = Material.object;
  GeomBuilder.add(VertexBuilder.node);
  VertexBuilder.newLines();
  VertexBuilder.addVertex([minx, miny, minz, minx, miny, maxz, minx, miny, maxz, maxx, miny, maxz,
                           maxx, miny, maxz, maxx, miny, minz, minx, maxy, minz, minx, maxy, maxz,
                           minx, maxy, maxz, maxx, maxy, maxz, maxx, maxy, maxz, maxx, maxy, minz,
                           minx, miny, maxz, minx, maxy, maxz, maxx, miny, maxz, maxx, maxy, maxz]);
  VertexBuilder.addColor(0xff000000);
  GeomBuilder.add(VertexBuilder.node);
  }
}
~

property:
id:worldpan
name:World panorama
type:d 0 3 2 ~None~Field~Ocean~Dark city

property:
id:worldbgcolor
name:World view background
type:dc 0 16777215 16764040

property:
id:hideworld
name:Hide world objects except creatures
type:d 0 1 0
help:Can be useful for screenshots

property:
id:modelpan
name:Body view panorama
type:d 0 3 1 ~Solid background~Field~Ocean~Dark city

property:
id:bgcolor
name:Body view background
type:dc 0 16777215 16764040

property:
id:bbox
name:Body view bounding box
type:d 0 1 1

property:
id:joint_width
name:Stick width (%)
type:d 10 150 100

property:
id:shadows
name:Shadows
type:d 0 1 1

property:
id:axes
name:X/Y/Z axes
type:d 0 1 0

property:
id:shownames
name:Show names
type:d 0 1 0

property:
id:symmetryplane
name:Guess symmetry plane (body view)
type:d 0 1 0
help:~
Displays a guess of the symmetry plane (may take a long time to compue for complex bodies).
Use scripting and the ModelSymmetry class to compute symmetry accurately.
Details of the symmetry estimation procedure are described in http://www.framsticks.com/node/808~
