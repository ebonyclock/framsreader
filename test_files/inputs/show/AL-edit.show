show:
name:Genetic editor
info:~
~
expdef:standard
code:~

@include "AL-shared.inc"

global viewer,editor,nextbut;
global g_button_sets;
global g_valid;
global g_key_width,g_key_height;
global g_format;
global g_allowed_chars;
global g_mode;
global g_tools_submenu;
global g_editarea,g_editarea_pos,g_toparea,g_using_textedit;
global g_fields,g_types,g_values,g_min,g_max,g_slider,g_buttons,g_selected,g_FIRST_BUTTON;
global g_white_bg,g_white_ui,g_white_num;
global fun_textFromEditor;
global fun_textToEditor;
global fun_events;
global g_partlabels;

function makeKeyButton(char,x,y)
{
var but=GUI.newButton("edit"+char,char);
but.addTo(g_editarea);
but.setAutolayout(0,0,0,0, x,y,g_key_width,g_key_height);
but.tooltip="add "+char;
but.font=3;
but.autorepeat=1;
nextbut=x+g_key_width;
return but;
}

function onLoad()
{
TrackingCam.cam_zoom = 1;
GLDisplay.desiredsimspeed = 0;
GLDisplay.user_interaction=0;
GLDisplay.world_visibility=1;
GLDisplay.skybox="cubeworld";
ShowManager.dispinfo=0;

loadCurrent();
prepareEditor(GenePools[0][0].geno.format);
call(fun_textToEditor)(GenePools[0][0].geno.rawgenotype,0);
updateEditing();
}

function default_textFromEditor()
{
return editor.text;
}

function default_textToEditor(text,animate)
{
if (animate)
  {
  var d=String.diff(editor.text,text);
  editor.edit(d);
  }
else
  {
  editor.text=text;
  editor.selected=String.len(text);
  }
}

// used in f9 - g_types
function makeInt(x) { return int(x); }
function makeFloat(x) { return float(x); }

function prepareEditor(format)
{
g_format=format;

g_using_textedit=1;
g_editarea_pos=1;

viewer=GUI.newModel("mod1","");
viewer.setAutolayout(10,10,-20,-20, 0,0,1,1);

g_editarea=GUI.newGroup("editarea");

editor=GUI.newTextview("ed","");
editor.font=3;

nextbut=0.0;
var but;

fun_events=null;
fun_textFromEditor=function default_textFromEditor;
fun_textToEditor=function default_textToEditor;

// begin format-dependent code
if (g_format=="1")
  {
g_allowed_chars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ(,)[:].0123456789-@|/!= "+String.char(8);
g_key_width=0.125; g_key_height=0.125;
g_editarea_pos=0.75;

makeKeyButton("X", nextbut,0);
makeKeyButton(",", nextbut,0);
but=makeKeyButton("Look:\nDGBH", nextbut,0);
but.name="mode0"; but.userdata=0;
but.bgcolor=0xffcccccc; but.font=0;
but.tooltip="Appearance modifiers: DGBH";
but.selected=1;
makeKeyButton("D", nextbut,0).bgcolor=0xffffcccc;
makeKeyButton("G", nextbut,0).bgcolor=0xfccfffcc;
makeKeyButton("B", nextbut,0).bgcolor=0xfcccccff;
makeKeyButton("H", nextbut,0);
nextbut=0.375;
makeKeyButton("R", nextbut,0);
makeKeyButton("C", nextbut,0);
makeKeyButton("Q", nextbut,0);
makeKeyButton("L", nextbut,0);
but=makeKeyButton("<", nextbut,0);
but.text="<<"; but.tooltip="Backspace"; but.bgcolor=0xffff4444;  but.fgcolor=0xffffffff;
nextbut=0.0;
makeKeyButton("(", nextbut,0.125);
makeKeyButton(")", nextbut,0.125);
but=makeKeyButton("Struct:\nRCQL", nextbut,0.125);
but.name="mode1"; but.userdata=1;
but.bgcolor=0xffcccccc; but.font=0;
but.tooltip="Structure modifiers: RCQL";
makeKeyButton("d", nextbut,0.125).bgcolor=0xffddaaaa;
makeKeyButton("g", nextbut,0.125).bgcolor=0xffaaddaa;
makeKeyButton("b", nextbut,0.125).bgcolor=0xffaaaadd;
makeKeyButton("h", nextbut,0.125).bgcolor=0xffbbbbbb;
nextbut=0.375;
makeKeyButton("r", nextbut,0.125).bgcolor=0xffbbbbbb;
makeKeyButton("c", nextbut,0.125).bgcolor=0xffbbbbbb;
makeKeyButton("q", nextbut,0.125).bgcolor=0xffbbbbbb;
makeKeyButton("l", nextbut,0.125).bgcolor=0xffbbbbbb;

g_button_sets=[["D","d","G","g","B","b","H","h"],
	["R","r","C","c","Q","q","L","l"]];
g_mode=0;

setButtonsVisible(g_button_sets[1],0);

g_helptxt="""<h1>Welcome to the genetic manipulation room f-one</h1><br>
This place is for geeks! You can directly modify the <b>f1</b> genotype, so you can build a creature of your dreams here, but it is not easy!<br>
<br>
You have to discover the meaning of <b>f1</b> genes. Here are some tips: <b>X</b> creates a stick, parentheses introduce a branching with individual branches separated with a comma. <b>DGBH</b> genes control colors (red, green, blue) and width of sticks. Big letters increase a property, small letters decrease it. <b>RCQL</b> genes influence structure (rotations, curvedness, and length).<br>
<br>
Try it yourself and enter a few simple genotypes:<br>
<b>  X<br>
  XXX<br>
  XXX(X,XX)<br>
  RXXX(X,X(GGddbX,DDgbX))</b><br>
and then introduce more genes.<br>
<br>
The part of the body that is created by the gene under your cursor is highlighted in green.<br>
<br>
Genes in square brackets <b>[...]</b> describe neurons, receptors and muscles, but these can only be introduced by evolution.<br>
<br>
When you write an invalid genotype, there is an automated correction tool, but it will only be able to fix simple errors. Good luck!
""";
  }
else if (g_format=="9")
  {
g_allowed_chars="LRUDBF"+String.char(8);
g_key_width=1.0/7; g_key_height=g_key_width;
g_editarea_pos=1.0-g_key_height;

makeKeyButton("L", nextbut,0);
makeKeyButton("R", nextbut,0);
makeKeyButton("D", nextbut,0);
makeKeyButton("U", nextbut,0);
makeKeyButton("B", nextbut,0);
makeKeyButton("F", nextbut,0);

but=makeKeyButton("<", nextbut,0);
but.text="<<"; but.tooltip="Backspace"; but.bgcolor=0xffff4444;  but.fgcolor=0xffffffff;

g_helptxt="""<h1>Welcome to the genetic manipulation room f-nine</h1><br>
The <b>f9</b> genetic language is very easy. Use 6 letters for 6 directions:<br>
<b>Left, Right, Down, Up, Back, Forth</b><br>
Try it!
""";
  }
if (g_format=="F")
  {
g_using_textedit=0;
// each fields is array: ["name", min_value, max_value, format]. This could be read from c++ source if fF_genotype.cpp:fF_growth_params were known to the VM
g_fields=[["n",1,15,"%d"],["sx",1.0,1.1,"%.2f"],["sy",1.0,1.1,"%.2f"],["sz",1.0,1.1,"%.2f"],["tr",-1.0,1.0,"%.2f"],["a1",-3.1415926,3.1415926,"%.2f"],["a2",-3.1415926,3.1415926,"%.2f"]];
var b_size=1.0/g_fields.size;
g_editarea_pos=1.0-b_size-0.15;

g_types=[function makeInt, function makeFloat, function makeFloat, function makeFloat, function makeFloat, function makeFloat, function makeFloat]; // converting strings to appropriate numeric type
g_values=[];

g_FIRST_BUTTON=100;
g_buttons=[];
for(var i=0;i<g_fields.size;i++)
   {
   var b=GUI.newButton("b"+i,"");
   b.addTo(g_editarea);
   b.userdata=g_FIRST_BUTTON+i;
   g_buttons[i]=b;
   b.font=5;
   b.setAutolayout(0,0,0,0, b_size*i,0.15,b_size,b_size);
   }
g_selected=-1;

g_min=GUI.newLabel("min","");
g_min.addTo(g_editarea);
g_min.align=-1; g_min.fgcolor=0xffffffff; g_min.visible=0; g_min.font=3;
g_min.setAutolayout(0,0,0,0, 0.02,0.02,1.0-0.02*2,0.15-0.02*2);
g_max=GUI.newLabel("max","");
g_max.addTo(g_editarea);
g_max.align=1; g_max.fgcolor=0xffffffff; g_max.visible=0; g_max.font=3;
g_max.setAutolayout(0,0,0,0, 0.02,0.02,1.0-0.02*2,0.15-0.02*2);

g_slider=GUI.newSlider("sli",0,-1,1);
g_slider.addTo(g_editarea);
g_slider.setAutolayout(0,0,0,0, 0.02,0.02,1.0-0.02*2,0.15-0.02*2);
g_slider.visible=0;

fun_textToEditor=function ff_textToEditor;
fun_textFromEditor=function ff_textFromEditor;
fun_events=function ff_events;

g_helptxt="""<p>Welcome to the genetic manipulation room f-F. You can modify Foraminifera genes here.
<p>Click on a gene and use the slider to adjust the value.
<p>Learn more <a href="http://www.framsticks.com/foraminifera">here</a>.
""";
  }
// end format-dependent code

g_toparea=GUI.newGroup("top");

var but;
but=GUI.newButton("save","Save & back");
but.addTo(g_toparea);
but.setAutolayout(0,0,0,0, 0.01,0.03, 0.3,0.94);
but=GUI.newButton("cancel","Cancel & back");
but.addTo(g_toparea);
but.setAutolayout(0,0,0,0, 0.31,0.03, 0.3,0.94);

g_tools_submenu=[];
but=GUI.newButton("mut","Mutate");
but.visible=0;
g_tools_submenu.add(but);
but=GUI.newButton("copy","Copy");
but.visible=0;
g_tools_submenu.add(but);
but=GUI.newButton("paste","Paste");
but.visible=0;
g_tools_submenu.add(but);
var white_group=GUI.newGroup("white_gr");
but=white_group;
but.visible=0;
g_tools_submenu.add(but);
//but=GUI.newButton("share","Share");
//but.visible=0;
//g_tools_submenu.add(but);
but=GUI.newButton("tools","");
but.image="tool-icon-shadow";
but.style=1;

but.addTo(GUI.top_right);
addHelpButton(GUI.top_right);

but=GUI.newButton("white_bg","");
but.image="roundwithoutline";
g_white_bg=but;
g_white_bg.selected=ShowProperties.whitebg;
g_white_bg.userdata="whitebg";
but.font=0;
but.addTo(white_group);
but.setAutolayout(0,0,0,0, 0,0,0.33,1);
but=GUI.newButton("white_ui",String.char(27)+"tfullscreen-icon;");
g_white_ui=but;
g_white_ui.userdata="fullscreen";
g_white_ui.selected=ShowProperties.fullscreen;
but.addTo(white_group);
but.setAutolayout(0,0,0,0, 0.33,0,0.33,1);
but=GUI.newButton("white_num","012");
g_white_num=but;
g_white_num.userdata="partlabels";
g_white_num.selected=ShowProperties.partlabels;
but.font=0;
but.addTo(white_group);
but.setAutolayout(0,0,0,0, 0.66,0,0.33,1);

if (ShowProperties.fullscreen)
   {
   editor.visible=0;
   g_editarea.animSetBegin();
   GUI["helpbut"].visible=0;
   g_editarea.setAutolayout(0,0,0,0, 0,1,1,1);
   viewer.setAutolayout(0,0,0,0, 0,0,1,1);
   g_toparea.setAutolayout(0,0,0,0, 0,-0.15,1,0.15);
   }
else
   {
   editor.visible=g_using_textedit;
   GUI["helpbut"].visible=1;
   g_editarea.setAutolayout(0,0,0,0, 0,g_editarea_pos,1,1);
   viewer.setAutolayout(10,10,-20,-20, 0,0,1,g_editarea_pos);
   g_toparea.setAutolayout(0,0,0,0, 0,0,1,0.15);
   }

if (ShowProperties.whitebg)
   editor.fgcolor=0xff000000;
else
   editor.fgcolor=0xffffffff;

editor.setAutolayout(0,0,0,0, 0.01,0.55,0.98,g_editarea_pos-0.55);
}

function ff_textFromEditor()
{
var g="";
for(var i=0;i<g_fields.size;i++)
   {
   if (i>0) g+=",";
   g+="%g" % g_values[i];
   }
return g;
}

function ff_textToEditor(text,animate)
{
var split=String.split(text,",");

while(split.size<g_fields.size)
   split.add("0");

for(var i=0;i<g_fields.size;i++)
   g_values[i]=call(g_types[i])(split[i]);

updateButtonLabels();
setupSlider();
}

function updateButtonLabel(i)
{
g_buttons[i].text=g_fields[i][0]+"\n"+(g_fields[i][3] % g_values[i]);
}

function updateButtonLabels()
{
for(var i=0;i<g_fields.size;i++)
   updateButtonLabel(i);
}

function setupSlider()
{
if (g_selected<0) return;
var f=g_fields[g_selected];
g_min.text=" "+(f[3]%f[1]);
g_min.visible=1;
g_max.text=""+(f[3]%f[2])+" ";
g_max.visible=1;
g_slider.min=f[1];
g_slider.max=f[2];
g_slider.data=g_values[g_selected];
}

function ff_events(elem,arg)
{
if ((typeof(elem.userdata)=="int") && (elem.userdata>=g_FIRST_BUTTON) && (elem.userdata<(g_FIRST_BUTTON+g_values.size)))
   {
   if (g_selected>=0)
      g_buttons[g_selected].selected=0;
   g_selected=elem.userdata-g_FIRST_BUTTON;
   g_buttons[g_selected].selected=1;
   g_slider.visible=1;
   setupSlider();
   return 1;
   }
switch(elem.name)
   {
   case "sli":
      {
      var new_value=call(g_types[g_selected])(elem.data);
      var old_txt=g_fields[g_selected][3] % g_values[g_selected];
      var new_txt=g_fields[g_selected][3] % new_value;
      if (new_txt!=old_txt)
        {
        g_values[g_selected]=call(g_types[g_selected])(new_txt);
        updateButtonLabel(g_selected);
        updateEditing();
        }
      return 1;
      }
   }
return 0;
}

function onShowStep()
{
TrackingCam.setOrient(viewer.orient);
updatePartLabels();
}

function setButtonsVisible(names,vis)
{
for(var n in names)
      GUI["edit"+n].visible=vis;
}

function genoFromEditor()
{
var t=call(fun_textFromEditor)();
return Geno.newFrom(t,g_format,"","");
}

function createPartLabels()
{
if (g_partlabels!=null) //destroy old
  {
  for (var lab in g_partlabels)
     GUI.removeElement(lab);
  g_partlabels=null;
  }
if (!ShowProperties.partlabels) return;
g_partlabels=[];
var m=Model.newFromString(viewer.text);
for(var i=0;i<m.numparts;i++)
  {
  var p=m.getPart(i);
  var lab=GUI.newLabel("part"+i,i);
  lab.font=4; lab.bgcolor=0x88ff0000; lab.align=0; lab.valign=0;
  lab.rect=lab.minimalRect;
  lab.height=0.8*lab.height;
//  var lab=GUI.newBubble("part"+i,i);
  lab.userdata=(p.x,p.y,p.z);
  g_partlabels.add(lab);
  lab.addTo(viewer);
  }
}

function updatePartLabels()
{
if (g_partlabels==null) return;
for (var lab in g_partlabels)
  {
  var pos=GLDisplay.project3D(viewer,lab.userdata);
  if (pos)
    lab.setPos(pos.x-lab.width/2,pos.y-lab.height/2);
  }
}

// update model viewer, check validity, update save button state
function updateEditing()
{
var geno=genoFromEditor();
viewer.text=geno.genotype;
g_valid=geno.is_valid;
var but=GUI["save"];
if (g_valid)
   {
   but.text="Save & back";
   but.bgcolor=0xff66cc66; but.fgcolor=0xffffffff;
   viewer.selected=editor.selected;
   createPartLabels();
   }
else
   {
   var fixable=GenMan.validate(geno).is_valid;
   but.bgcolor=0xffcc0000;
   but.text="Invalid.\n";
   if (fixable)
   {
   	 but.text+="Click to repair";
   	 but.fgcolor=0xffffffff;
   }
   else
   {
   	 but.text+="Cannot repair";
   	 but.fgcolor=0xffffbbbb; //namiastka disable
   }
   }
}

function createMutant(original_g)
{
  var new_g=GenMan.mutate(original_g);
  if (!new_g.is_valid) return null;
  new_g.info="mutated '"+original_g.name+"'";
  return new_g;
}

function mutate()
{
var g = genoFromEditor();
var new_g = createMutant(g);
if (new_g!=null)
  {
  call(fun_textToEditor)(new_g.rawgenotype,1);
  updateEditing();
  }
}

function showGenotype(txt,guimode)
{
var g=Geno.newFromString(txt); // case 1: contains /*format*/
if (!g.is_valid)
   {
   g=Geno.newFrom(txt,g_format,"",""); // case 2: raw genotype for current format
   if (!g.is_valid)
      {
      if (guimode)
        {
        GUI.playSound("bzzt");
        GUI.messageBox("Invalid genotype (Ignored)",txt);
        }
      else
        {
        Simulator.message("Invalid genotype:\n"+txt,2);
        }
      return 0;
      }
   }
if (g_format!=g.format)
  {
  // format changed - reconfigure the editor
  GUI.removeAll();
  g_partlabels=null;
  ALsharedResetGUI();
  prepareEditor(g.format);
  }
call(fun_textToEditor)(g.rawgenotype,0);
updateEditing();
return 1;
}

function paste()
{
var t=GUI.clipboard;
if (t!="")
  showGenotype(t,1);
}

function onGUIEvent(elem,arg)
{
if (handleHelp(elem)) return;

if (fun_events)
   if (call(fun_events)(elem,arg)) return;

switch(elem.name)
   {
   case "save":
     {
     var geno=genoFromEditor();
     if (g_valid)
       {
       GenePools[0].clear();
       var g=GenePools[0].add(geno);
       setInitialDataDictionary(g);
       g.data->edited=1;
       g.data->time=Math.time;
       saveCurrent();
       ShowManager.show="AL-eval";
       return;
       }
     else
       {
       call(fun_textToEditor)(GenMan.validate(geno).rawgenotype,0);
       updateEditing();
       return;
       }
     }

   case "cancel":
     ShowManager.show="AL-main";
     return;

   case "mut":
     mutate();
     return;

   case "copy":
     GUI.clipboard=genoFromEditor().genotype;
     return;

   case "paste":
     paste();
     return;

   case "tools":
     handleSubMenu(elem,g_tools_submenu,1,0.25,0.14);
     return;
   }

if (String.startsWith(elem.name,"white_"))
   {
   elem.selected=!elem.selected;
   ShowProperties.[elem.userdata]=elem.selected;
   }

if (String.startsWith(elem.name,"mode"))
   {
   if (elem.userdata==g_mode) return;
   setButtonsVisible(g_button_sets[g_mode],0);
   setButtonsVisible(g_button_sets[elem.userdata],1);
   elem.selected=1;
   GUI["mode"+g_mode].selected=0;
   g_mode=elem.userdata;
   return;
   }

if (String.startsWith(elem.name,"edit"))
   {
   var ch=elem.text;
   if (ch=="<<") ch=String.char(8);
   editor.edit(ch);
   updateEditing();
   return;
   }

if (elem.name=="ed")
   {
   if (g_valid)
     viewer.selected=editor.selected;
   }
}

function onResize()
{
}

function onKey(code)
{
if (code==GUI.KEY_BACK)
   {
   if (closePopup()) return 1;
   onGUIEvent(GUI["cancel"],null);
   return 1;
   }
//CLI.println("code="+code);
var ch=String.char(code);
if ((!ShowProperties.fullscreen) && (String.indexOf(g_allowed_chars,ch)>=0))
   {
   editor.edit(ch);
   updateEditing();
   }
return 0;
}

function ShowProperties_whitebg_set()
{
  g_white_bg.selected=ShowProperties.whitebg;
if (ShowProperties.whitebg)
   {
   GLDisplay.bgcolor=0xffffffff;
   GLDisplay.world_visibility=0;
   editor.fgcolor=0xff000000;
   }
else
   {
   GLDisplay.world_visibility=1;
   editor.fgcolor=0xffffffff;
   }
}

function ShowProperties_fullscreen_set()
{
  g_white_ui.selected=ShowProperties.fullscreen;
if (ShowProperties.fullscreen)
   {
   editor.visible=0;
   GUI["helpbut"].visible=0;
   g_editarea.animSetBegin();
   g_editarea.setAutolayout(0,0,0,0, 0,1,1,1);
   g_editarea.animSetEnd();
   viewer.animSetBegin();
   viewer.setAutolayout(0,0,0,0, 0,0,1,1);
   viewer.animSetEnd();
   g_toparea.animSetBegin();
   g_toparea.setAutolayout(0,0,0,0, 0,-0.15,1,0.15);
   g_toparea.animSetEnd();
   }
else
   {
   editor.visible=g_using_textedit;
   GUI["helpbut"].visible=1;
   g_editarea.animSetBegin();
   g_editarea.setAutolayout(0,0,0,0, 0,g_editarea_pos,1,1);
   g_editarea.animSetEnd();
   viewer.animSetBegin();
   viewer.setAutolayout(10,10,-20,-20, 0,0,1,g_editarea_pos);
   viewer.animSetEnd();
   g_toparea.animSetBegin();
   g_toparea.setAutolayout(0,0,0,0, 0,0,1,0.15);
   g_toparea.animSetEnd();
   }
if (viewer.width>0) //workaround: when called before the gui is first displayed (e.g. from command line), viewer.size is not yet calculated and animation would fail
  {
  g_toparea.startAnimation(1.0);
  g_editarea.startAnimation(1.0);
  viewer.startAnimation(1.0);
  }
}

function ShowProperties_partlabels_set()
{
  g_white_num.selected=ShowProperties.partlabels;
  createPartLabels();
  updatePartLabels();
}

function ShowProperties_genotype_set()
{
  if (!showGenotype(ShowProperties.genotype,0))
    showGenotype("""//0
p:sh=1,sx=1,sy=1,sz=1,vr=1,vg=1,vb=0
p:-0.4,-0.8,0.4,sx=0.15,sy=0.15,sz=0.15,sh=1,vr=0,vg=0,vb=0
p:0.4,-0.8,0.4,sx=0.15,sy=0.15,sz=0.15,sh=1,vr=0,vg=0,vb=0
p:0,-0.95,0,sh=1,sx=0.25,sy=0.1,sz=0.1,vr=1,vg=0,vb=0
p:-0.35,-0.9,-0.15,sh=1,sx=0.25,sy=0.1,sz=0.1,ry=0.6,rz=-0.4,vr=1,vg=0,vb=0
p:0.35,-0.9,-0.15,sh=1,sx=0.25,sy=0.1,sz=0.1,ry=-0.6,rz=0.4,vr=1,vg=0,vb=0
j:0,1,sh=1
j:0,2,sh=1
j:0,3,sh=1
j:0,4,sh=1
j:0,5,sh=1
""",0);
}

~

property:
id:whitebg
name:White background
type:d 0 1

property:
id:fullscreen
name:Full screen
help:Hide user interface
type:d 0 1

property:
id:partlabels
name:Display part labels
type:d 0 1

property:
id:genotype
name:Genotype to display
type:s
