[
  {
    "code": "\n//by MarCas, 2005\n\nglobal tw_font;\nglobal tw_align;\nglobal tw_space;\nglobal tw_hspace;\n\nglobal tw_last_word;\nglobal tw_last_line;\n\nglobal tw_pos_x;\nglobal tw_pos_y;\nglobal tw_pos_z;\n\nglobal tw_result;\n\nfunction onExpDefLoad()\n{\n  // set default values\n  ExpProperties.text = \"<h1>\\n<vs1.3>\\n<center>STAR WARS\\n<left>\\n\";\n  ExpProperties.text += \"<justify>A LONG TIME AGO IN A GALAXY FAR FAR AWAY A BATTLE RAGED\\n<left>\\n\";\n  ExpProperties.text += \"<justify>FOR EONS A FIERCE STRUGGLE HAD RAVAGED PLUMONIA\\nAND WITHOUT INTERVENTION NO ONE WOULD LIVE TO SEE THE END\\n<left>\\n\";\n  //ExpProperties.text += \"<justify>THE INHABITANTS OF PLUMONIA WERE CREATURES OF VIRTUE AND PEACE\\n<left>\\n\";\n  //ExpProperties.text += \"<center>HOWEVER THERE WERE THOSE WHO HELD NOT THE HIGH REGARD FOR EQUALITY AND HONOR\\n<left>\\n\";\n  ExpProperties.collisions = 0;\n  World.wrldtyp = 0;\n  World.wrldbnd = 0;\n  World.wrldsiz = 30;\n  World.wrldwat = -1;\n\n  // load default fonts\n  GenePools[0].clear();\n  Simulator.import(\"fonts.gen\", 2);\n  if (GenePools[0].size < 72)\n    Simulator.message(\"Problems with the 'fonts.gen' file?\", 1);\n}\n\nfunction onExpInit()\n{\n  // set collision mask\n  var pop=Populations[0];\n  pop.selfmask = pop.othermask = ExpProperties.collisions;\n\n  // set start values\n  tw_font = \"f0\";\n  tw_align = \"left\";\n  tw_space = 0.25;\n  tw_hspace = 2.5;\n\n  tw_last_word = 0;\n  tw_last_line = 0;\n\n  tw_pos_x = -1.0 + World.wrldsiz;\n  tw_pos_y = World.wrldsiz;\n  tw_pos_z = -1.0;\n\n  // clear live library\n  pop.clear();\n\n  tw_result = 0;\n  var tw_mode = 0;\n  var tw_letter;\n  var tw_last_letter=\"\";\n  var tw_command;\n  var i;\n  for (i = 0; i < String.len(ExpProperties.text); i++)\n  {\n    // read letter\n    tw_letter = String.substr(ExpProperties.text, i, 1);\n\n    // replace white spaces with space\n    if (tw_letter == \"\\t\" || tw_letter == \"\\n\")\n      tw_letter = \" \";\n\n    switch (tw_mode)\n    {\n      // read text mode\n    case 0:\n      if (tw_letter == \"<\")\n      {\n        tw_command = \"\";\n        tw_mode = 1;\n      }\n      else if (tw_letter == \">\")\n        tw_mode = 2;\n      else if (tw_letter != \" \" || tw_last_letter != \" \")\n      {\n        tw_last_letter = tw_letter;\n        writeLetter(tw_letter);\n      }\n      break;\n\n      // read commands mode\n    case 1:\n      if (tw_letter == \">\")\n      {\n        realizeCommand(tw_command);\n        tw_mode = 0;\n      }\n      else\n        tw_command += tw_letter;\n      break;\n\n      // read special char mode\n    case 2:\n      writeLetter(tw_letter);\n      tw_mode = 0;\n      break;\n\n    default:\n      Simulator.message(\"Bad mode.\", 2);\n    }\n  }\n  if (tw_result > 0)\n    Simulator.message(\"The font is missing \" + tw_result + \" symbols!\", 1);\n}\n\nfunction onStep()\n{\n  var pop=Populations[0];\n  // set collision mask\n  pop.selfmask = pop.othermask = ExpProperties.collisions;\n\n  var dz;\n\n  var i;\n  var the_end = 1;\n  for (i = 0; i < pop.size; i++)\n  {\n    var cr=pop[i];\n    dz = WorldMap.getHeight(cr.bboxLow.x + cr.bboxSize.x / 2, cr.bboxLow.y + cr.bboxSize.y / 2 - 0.01 * ExpProperties.speed) - WorldMap.getHeight(cr.bboxLow.x + cr.bboxSize.x / 2, cr.bboxLow.y + cr.bboxSize.y / 2);\n    cr.locationSetBboxLow(cr.bboxLow.x, cr.bboxLow.y - 0.01 * ExpProperties.speed, cr.bboxLow.z + dz);\n    if (cr.bboxLow.y + cr.bboxSize.y > 0)\n      the_end = 0;\n  }\n  if (the_end)\n    Simulator.stop();\n}\n\n// find genotype in gene pool for selected letter and font\nfunction tw_findGenotype(tw_letter)\n{\n  var gen1 = -1;\n  var gen2 = -1;\n  var gen3 = -1;\n\n  var i;\n  var pool=GenePools[0];\n  for (i = 0; i < pool.size; i++)\n  {\n    var g=pool[i];\n\n    if (g.name == \"f0\")\n      gen3 = i;\n    else if (g.name == tw_font)\n      gen2 = i;\n    else if (g.name == tw_font + \"_\" + tw_letter)\n      gen1 = i;\n  }\n\n  if (gen1 >= 0)\n    return gen1;\n  else\n  {\n    tw_result++;\n    if (gen2 >= 0)\n      return gen2;\n    else\n      return gen3;\n  }\n}\n\n// get pos_x of selected creature\nfunction tw_get_pos(a)\n{\n  return Populations[0][a].bboxLow.x;\n}\n\n// get size of selected creature\nfunction tw_get_size(a)\n{\n  return Populations[0][a].bboxSize.x - 2;\n}\n\n// calculate distance between left and right ends of letters line\nfunction tw_dist(a, b)\n{\n  return tw_get_pos(a) + tw_get_size(a) - tw_get_pos(b);\n}\n\n// align letters to left in line\nfunction tw_left(a, b)\n{\n  var tw_old_pos_x = tw_get_pos(a) + tw_get_size(a);\n  var tw_new_pos_x = -1.0 + World.wrldsiz;\n  var tw_delta_x = tw_new_pos_x - tw_old_pos_x;\n\n  var i;\n  for (i = a; i <= b; i++)\n  {\n    var cr=Populations[0][i];\n    tw_pos_x = cr.bboxLow.x + tw_delta_x;\n    cr.locationSetBboxLow(tw_pos_x, tw_pos_y, cr.bboxLow.z);\n  }\n\n  return tw_pos_x;\n}\n\n// center letters in line\nfunction tw_center(a, b)\n{\n  var tw_old_pos_x = tw_get_pos(b);\n  var tw_new_pos_x = 0.5 * (World.wrldsiz - tw_dist(a, b)) - 1;\n  var tw_delta_x = tw_new_pos_x - tw_old_pos_x;\n\n  var i;\n  for (i = a; i <= b; i++)\n  {\n    var cr=Populations[0][i];\n    tw_pos_x = cr.bboxLow.x + tw_delta_x;\n    cr.locationSetBboxLow(tw_pos_x, tw_pos_y, cr.bboxLow.z);\n  }\n\n  return tw_pos_x;\n}\n\n// align letters to right in line\nfunction tw_right(a, b)\n{\n  var tw_old_pos_x = tw_get_pos(b);\n  var tw_new_pos_x = -1.0;\n  var tw_delta_x = tw_new_pos_x - tw_old_pos_x;\n\n  var i;\n  for (i = a; i <= b; i++)\n  {\n    var cr=Populations[0][i];\n    tw_pos_x = cr.bboxLow.x + tw_delta_x;\n    cr.locationSetBboxLow(tw_pos_x, tw_pos_y, cr.bboxLow.z);\n  }\n\n  return tw_pos_x;\n}\n\n// justify letters in line\nfunction tw_justify(a, b)\n{\n  var denominator = tw_dist(a, b) - tw_get_size(a);\n  if (denominator == 0)\n    return tw_left(a, b);\n  else\n  {\n    var tw_delta = tw_get_pos(b);\n    var tw_skala = (World.wrldsiz - tw_get_size(a)) / denominator;\n\n    var i;\n    for (i = a; i <= b; i++)\n    {\n      var cr=Populations[0][i];\n      tw_pos_x = tw_skala * (cr.bboxLow.x - tw_delta) - 1;\n      cr.locationSetBboxLow(tw_pos_x, tw_pos_y, cr.bboxLow.z);\n    }\n\n    return tw_pos_x;\n  }\n}\n\n// write one letter\nfunction writeLetter(tw_letter)\n{\n  var pop=Populations[0];\n  if (tw_letter == \" \")\n  {\n    tw_last_word = pop.size;\n    tw_pos_x -= tw_space * 4;\n  }\n  else\n  {\n    var g=tw_findGenotype(tw_letter);\n    if (g<0) {/*Simulator.message(\"Invalid font? (\"+tw_font+\")\",2);*/ return;}\n    var cr=Populations[0].add(GenePools[0][g]);\n    var ind=cr.index;\n\n    cr.rotate(0, Math.pi, 0); //need to rotate letters because they were designed rotated :-/\n\n    if (ind > tw_last_line)\n      tw_pos_x -= tw_space + tw_get_size(ind);\n    cr.locationSetBboxLow(tw_pos_x, tw_pos_y, tw_pos_z);\n\n    switch (tw_align)\n    {\n    case \"left\":\n      if (tw_dist(tw_last_line, ind) > World.wrldsiz)\n      {\n        if (tw_last_word > tw_last_line)\n        {\n          tw_left(tw_last_line, tw_last_word - 1);\n          tw_pos_y += tw_hspace;\n          tw_pos_x = tw_left(tw_last_word, ind);\n          tw_last_line = tw_last_word;\n        }\n        else\n        {\n          tw_left(tw_last_line, ind - 1);\n          tw_pos_y += tw_hspace;\n          tw_pos_x = tw_left(ind, ind);\n          tw_last_line = ind;\n        }\n      }\n      else\n        tw_pos_x = tw_left(tw_last_line, ind);\n      break;\n\n    case \"center\":\n      if (tw_dist(tw_last_line, ind) > World.wrldsiz)\n      {\n        if (tw_last_word > tw_last_line)\n        {\n          tw_center(tw_last_line, tw_last_word - 1);\n          tw_pos_y += tw_hspace;\n          tw_pos_x = tw_center(tw_last_word, ind);\n          tw_last_line = tw_last_word;\n        }\n        else\n        {\n          tw_center(tw_last_line, ind - 1);\n          tw_pos_y += tw_hspace;\n          tw_pos_x = tw_center(ind, ind);\n          tw_last_line = ind;\n        }\n      }\n      else\n        tw_pos_x = tw_center(tw_last_line, ind);\n      break;\n\n    case \"right\":\n      if (tw_dist(tw_last_line, ind) > World.wrldsiz)\n      {\n        if (tw_last_word > tw_last_line)\n        {\n          tw_right(tw_last_line, tw_last_word - 1);\n          tw_pos_y += tw_hspace;\n          tw_pos_x = tw_right(tw_last_word, ind);\n          tw_last_line = tw_last_word;\n        }\n        else\n        {\n          tw_right(tw_last_line, ind - 1);\n          tw_pos_y += tw_hspace;\n          tw_pos_x = tw_right(Populations.creature, ind);\n          tw_last_line = ind;\n        }\n      }\n      else\n        tw_pos_x = tw_right(tw_last_line, ind);\n      break;\n\n    case \"justify\":\n      if (tw_dist(tw_last_line, ind) > World.wrldsiz)\n      {\n        if (tw_last_word > tw_last_line)\n        {\n          tw_justify(tw_last_line, tw_last_word - 1);\n          tw_pos_y += tw_hspace;\n          tw_pos_x = tw_left(tw_last_word, ind);\n          tw_last_line = tw_last_word;\n        }\n        else\n        {\n          tw_justify(tw_last_line, ind - 1);\n          tw_pos_y += tw_hspace;\n          tw_pos_x = tw_left(ind, ind);\n          tw_last_line = ind;\n        }\n      }\n      else\n        tw_pos_x = tw_left(tw_last_line, ind);\n      break;\n    }\n    tw_pos_x -= tw_space;\n  }\n}\n\nfunction testCommand(tw_command, cmd)\n{\n  return String.indexOf(tw_command, cmd);\n}\n\nfunction commandValue(tw_command, cmd)\n{\n  return float(String.right(tw_command, String.len(tw_command) - String.len(cmd)));\n}\n\n// perform command\nfunction realizeCommand(tw_command)\n{\n  var pop=Populations[0];\n  if (testCommand(tw_command, \"left\") >= 0)\n  {\n    tw_align = \"left\";\n    tw_pos_x = -1.0 + World.wrldsiz;\n    tw_pos_y += tw_hspace;\n    tw_last_line = tw_last_word = pop.size;\n  }\n  else if (testCommand(tw_command, \"center\") >= 0)\n  {\n    tw_align = \"center\";\n    tw_pos_x = -1.0 + 0.5 * World.wrldsiz;\n    tw_pos_y += tw_hspace;\n    tw_last_line = tw_last_word = pop.size;\n  }\n  else if (testCommand(tw_command, \"right\") >= 0)\n  {\n    tw_align = \"right\";\n    tw_pos_x = -1.0;\n    tw_pos_y += tw_hspace;\n    tw_last_line = tw_last_word = pop.size;\n  }\n  else if (testCommand(tw_command, \"justify\") >= 0)\n  {\n    tw_align = \"justify\";\n    tw_pos_x = -1.0 + World.wrldsiz;\n    tw_pos_y += tw_hspace;\n    tw_last_line = tw_last_word = pop.size;\n  }\n  else if (testCommand(tw_command, \"vs\") >= 0)\n    tw_hspace = 2.0 + commandValue(tw_command, \"vs\");\n  else if (testCommand(tw_command, \"hs\") >= 0)\n    tw_space = commandValue(tw_command, \"hs\") / 2;\n  else if (testCommand(tw_command, \"h\") >= 0)\n    tw_pos_z = commandValue(tw_command, \"h\");\n  else\n    tw_font = tw_command;\n}\n",
    "info": "This experiment definition displays formatted (and flowing) text using creatures as letters and digits. It requires the \"fonts.gen\" file. Only big letters and digits can be used in the text.\n\nInitialize the experiment to situate the text.\n\nThe text can be formatted using HTML-like tags:\n\n<left>\n<center>\n<right>\n<justify> - are used to start a paragraph\n\n<hNUMBER> - sets the height (elevation) of the text (see also the 'Gravity' setting)\n\n<hsNUMBER> - sets hotizontal spacing between letters\n\n<vsNUMBER> - sets vertical spacing between lines\n\n<f0>\n<f1> - select the font (f0 is more regular)\n",
    "_classname": "expdef",
    "name": "Text writer"
  },
  {
    "type": "s 1",
    "id": "text",
    "_classname": "property",
    "help": "The text you want to see",
    "name": "Text"
  },
  {
    "type": "d 0 1",
    "id": "collisions",
    "_classname": "property",
    "help": "When turned on, nearby letters will collide and bounce",
    "name": "Collisions"
  },
  {
    "type": "d 1 100 5",
    "id": "speed",
    "_classname": "property",
    "help": "Text movement: 1-slowest, 100-fastest",
    "name": "Speed"
  }
]