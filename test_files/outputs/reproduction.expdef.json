[
  {
    "code": "\nglobal foodenergywaiting;\n\nfunction onExpDefLoad()\n{\n\t// define genotype and creature groups\n\tGenePools[0].name = \"Backup\";\n\n\tvar pop = Populations[0];\n\tpop.name = \"Creatures\";\n\tpop.en_assim = 0;\n\tpop.nnsim = 1;\n\tpop.enableperf = 1;\n\tpop.death = 1;\n\tpop.energy = 1;\n\tpop.selfmask = 0x10000;\n\tpop.othermask = 0x0001; //does not match any selfmask - but nonzero, so Creature.boundingBoxCollisions() can also detect creatures\n\n\tpop = Populations.addGroup(\"Food\");\n\tpop.nnsim = 0;\n\tpop.enableperf = 0;\n\tpop.death = 1;\n\tpop.energy = 1;\n\tpop.selfmask = 0;\n\tpop.othermask = 0x10000; //collide with creatures\n\n\tExpProperties.initialgen = \"ddGGGbblllfffX[0:2.420,2:-2,1 :-1][-1 :1,0:1,0:-1][-1:1](RRlllfffMMMX[|-1:-10]lllFFFMMMgggggX[|-2:-1],gggfffIXlllfffMMMsX[|6:10,3:-10](RRlllfffMMMIX[|-4:-10]lllFFFMMMIggggX[|-5:-1][S1:1],,RRlllfffMMMIX[|-7:10]lllFFFMMMIgggX[|-8:-1][S1:1]),RRlllfffMMMX[|-10:10]lllFFFMMMgggggX[|-11:-1.784])\";\n\tExpState.food = \"\"; //needed only for simplified saving\n\n\tWorld.wrldbnd = 0;\n}\n\n@include \"standard_placement.inc\"\n\nfunction onExpInit()\n{\n\tGenePools[0].clear();\n\tPopulations[0].clear();\n\tPopulations[1].clear();\n\tvar cr = Populations[0].add(ExpProperties.initialgen);\n\tcr.name = \"Initial creature\";\n\tplaceCreatureRandomly(cr, 0, 4);\n\tExpState.totaltestedcr = 0;\n\tfoodenergywaiting = ExpProperties.feede0;\n}\n\n\nfunction onCreaturesBorn(cr)\n{\n\tcr.idleen = ExpProperties.e_meta;\n\tcr.energy0 = ExpProperties.Energy0;\n\tcr.energy = cr.energy0;\n\tcr.data->children = 0;\n\tcr.data->energy_eaten = 0.0;\n\n\tif (ExpProperties.structured_output==1)\n\t{\n\t\tvar dict={\"Time\":Simulator.stepNumber,\"Pop0\":Populations[0].size,\"Pop1\":Populations[1].size,\"ID\":cr.uid,\"DiedCount\":ExpState.totaltestedcr};\n\t\tSimulator.print(\"[BORN] \" + String.serialize(dict));\n\t}\n}\n\nfunction foodGenotype()\n{\n\tif (ExpProperties.foodgen == \"\")\n\t\treturn \"//0\\nm:Vstyle=food\\np:\";\n\telse\n\t\treturn ExpProperties.foodgen;\n}\n\nfunction addfood()\n{\n\tvar cr = Populations[1].add(foodGenotype());\n\n// the 'style' parameter can be used to set a color of the food item (requires a *.style file that supports this):\n// Populations.createFromString(\"//0\\nm:Vstyle=food(color=0)\\np:\");\n\n\tcr.name = \"Food\";\n\tcr.idleen = 0;\n\tcr.energy0 = ExpProperties.feede0;\n\tcr.energy = cr.energy0;\n\n\tvar retry = 50; //try 50 times\n\twhile (retry--)\n\t{\n\t\tplaceCreatureRandomly(cr, 0, 0);\n\t\tif (!cr.boundingBoxCollisions(0x10001)) //0x10001==\"food and creatures\". The default 0 would not detect food-vs-food collisions (because they normally don't collide in this experiment).\n\t\t\treturn cr;\n\t}\n\tSimulator.message(\"addfood() could not avoid collisions.\", 1);\n\treturn cr;\n}\n\nfunction onStep()\n{\n\tfoodenergywaiting += ExpProperties.feedrate;\n\t//Simulator.print(\"food energy waiting = \"+foodenergywaiting);\n\tif (foodenergywaiting > ExpProperties.feede0)\n\t{\n\t\taddfood();\n\t\tfoodenergywaiting = 0.0;\n\t\tSimulator.checkpoint();\n\t}\n\n\tif (Populations[0].size == 0)\n\t{\n\t\tif (ExpProperties.autorestart)\n\t\t{\n\t\t\tSimulator.print(\"no more creatures, restarting...\");\n\t\t\tonExpInit();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSimulator.print(\"no more creatures, stopped.\");\n\t\t\tSimulator.stop();\n\t\t}\n\t}\n}\n\nfunction onCreaturesStep(cr)\n{\n\tif (cr.energy >= ExpProperties.reprEnergy)\n\t{\n\t\tcr.data->children++;\n\t\tvar newcreature;\n\t\tvar operation_name;\n\t\tvar inherited;\n\t\tif (Math.rnd01 * 100.0 > ExpProperties.p_mut)\n\t\t{\n\t\t\toperation_name = \"cloning\";\n\t\t\tinherited = 1.0;\n\t\t\tif (ExpProperties.structured_output==0)\n\t\t\t\tSimulator.print(\"creating a clone of '\" + cr.name + \"'...\");\n\t\t\tnewcreature = Populations[0].add(cr.geno);\n\t\t}\n\t\telse\n\t\t{\n\t\t\toperation_name = \"mutation\";\n\t\t\tvar g = GenMan.mutate(cr.geno);\n\t\t\tif (g.is_valid)\n\t\t\t{\n\t\t\t\tif (ExpProperties.structured_output==0)\n\t\t\t\t\tSimulator.print(\"creating a mutant... (\" + g.info + \")\");\n\t\t\t\tinherited = 1.0 - String.parseFloat(String.split(g.info,\"%\")[0]) / 100.0;\n\t\t\t\tnewcreature = Populations[0].add(g);\n\t\t\t}\n\t\t}\n\t\tif (newcreature != null)\n\t\t{\n\t\t\tif (ExpProperties.structured_output==1)\n\t\t\t{\n\t\t\t\tvar dict={\"Time\":Simulator.stepNumber,\"FromIDs\":[cr.uid],\"ID\":newcreature.uid, \"Inherited\":[inherited], \"Operation\":operation_name};\n\t\t\t\tSimulator.print(\"[OFFSPRING] \" + String.serialize(dict));\n\t\t\t}\n\t\t\t\n\t\t\tnewcreature.energy0 = cr.energy / 2;\n\t\t\tnewcreature.energy = newcreature.energy0;\n\t\t\tnewcreature.locationSetBboxLow(cr.bboxLow.x + (cr.bboxSize.x - newcreature.bboxSize.x) / 2, cr.bboxLow.y + (cr.bboxSize.y - newcreature.bboxSize.y) / 2, cr.bboxLow.z + (cr.bboxSize.z - newcreature.bboxSize.z) / 2);\n\t\t\tnewcreature.rotate(0, 0, Math.rndUni(0, Math.twopi));\n\t\t\tcr.energy = cr.energy / 2;\n\t\t}\n\t}\n}\n\nfunction onCreaturesDied(cr)\n{\n\tExpState.totaltestedcr++;\n\tif (ExpProperties.structured_output==1)\n\t{\n\t\tvar dict={\"Time\":Simulator.stepNumber,\"Pop0\":Populations[0].size,\"Pop1\":Populations[1].size,\"ID\":cr.uid,\"Children\":cr.data->children,\"EnergyEaten\":cr.data->energy_eaten,\"Lifespan\":cr.steps_in_lifespan,\"DiedCount\":ExpState.totaltestedcr};\n\t\tSimulator.print(\"[DIED] \" + String.serialize(dict));\n\t}\n\telse\n\t\tSimulator.print(\"'\" + cr.name + \"' died... it had \" + cr.data->children + \" children\");\n\n\tif (ExpProperties.savedead==1)\n\t{\n\t\tvar g = GenePools[0].add(cr.geno);\n\t\tg.lifespan = cr.lifespan;\n\t\tg.velocity = cr.velocity;\n\t\tg.data = cr.data;\n\t\tg.data[\"creature_uid\"] = cr.uid;\n\t\tg.instances = 1;\n\t}\n}\n\nfunction onFoodCollision()\n{\n\tvar e = Collision.Part2.ing * ExpProperties.feedtrans;\n\tvar transferred = Collision.Creature1.transferEnergyTo(Collision.Creature2, e);\n\t//Simulator.print(\"transferring \"+transferred+\" of energy from \"+Collision.Creature1.name+\" to \"+Collision.Creature2.name+\" (\"+Collision.Creature2.energy+\")\");\n\tCollision.Creature2.data->energy_eaten += transferred;\n}\n\nfunction onExpLoad()\n{\n\tfor (var pop in Populations)\n\t\tpop.clear();\n\n\tLoader.addClass(sim_params.*);\n\tLoader.setBreakLabel(Loader.BeforeUnknown, \"onExpLoad_Unknown\");\n\tLoader.run();\n\n\tif (typeof(ExpState.food) == \"Vector\") //restore food locations and energy from saved vector\n\t\tfor(var f in ExpState.food)\n\t\t\tif (f.size >= 3)\n\t\t\t{\n\t\t\t\t//x,y,energy\n\t\t\t\tvar food_cr = Populations[1].add(foodGenotype());\n\t\t\t\tfood_cr.locationSetBboxCenter(f[0],f[1],food_cr.bboxCenter.z);\n\t\t\t\tfood_cr.energy = f[2];\n\t\t\t\tfood_cr.energy0 = ExpProperties.feede0; //energy0 could be saved for each food just as energy is, but since energy0 is not saved, we assume it is set to the same ExpProperties.feede0 value for all food items\n\t\t\t}\n\n\tSimulator.print(\"Loaded \" + Populations[0].size + \" creatures and \" + Populations[1].size + \" food objects\");\n}\n\nfunction onExpLoad_Unknown()\n{\n\tif (Loader.objectName == \"Creature\")\n\t{\n\t\tLoader.currentObject = CreatureSnapshot.new();\n\t\tLoader.loadObject();\n\t\tPopulations[0].add(Loader.currentObject);\n\t}\n}\n\nfunction onExpSave()\n{\n\tFile.writeComment(\"saved by '%s.expdef'\" % Simulator.expdef);\n\n\tvar tmpvec = [], i; //save food locations and energy in a simple, concise form (not as full Creature objects, but as a single vector)\n\n\tfor(var cr in Populations[1])\n\t\ttmpvec.add([cr.bboxCenter.x, cr.bboxCenter.y, cr.energy]);\n\n\tExpState.food = tmpvec;\n\tFile.writeObject(sim_params.*);\n\tExpState.food = null; //vectors are only created for saving and then discarded\n\n\tfor (var cr in Populations[0])\n\t\tFile.writeObject(cr);\n}\n\n@include \"standard_events.inc\"\n\n",
    "info": "Evolution in a population with asexual reproduction. Each creature with a sufficient energy level produces a mutant offspring, which is born near its parent.\nFood is created at a constant rate and placed randomly.\n",
    "_classname": "expdef",
    "name": "Evolution (endogenous fitness)"
  },
  {
    "type": "s 1",
    "id": "initialgen",
    "_classname": "property",
    "name": "Initial genotype"
  },
  {
    "type": "f -1 50 0.1",
    "id": "creath",
    "_classname": "property",
    "help": "Vertical position (above the surface) where new creatures are revived.\nNegative values are only used in the water area:\n  0   = at the surface\n-0.5 = half depth\n-1   = just above the bottom",
    "name": "Creation height"
  },
  {
    "type": "f 0 100 50",
    "id": "p_mut",
    "_classname": "property",
    "name": "Mutations"
  },
  {
    "type": "f 0 10000 1000",
    "name": "Starting energy",
    "group": "Energy",
    "id": "Energy0",
    "_classname": "property",
    "help": "Initial energy for the first creature"
  },
  {
    "type": "f 0 10000 1001",
    "name": "Reproduction energy",
    "group": "Energy",
    "id": "reprEnergy",
    "_classname": "property",
    "help": "Creature produces an offspring when its energy level reaches this threshold"
  },
  {
    "type": "f 0 1 0.1",
    "name": "Idle metabolism",
    "group": "Energy",
    "id": "e_meta",
    "_classname": "property",
    "help": "Each stick consumes this amount of energy in one time step"
  },
  {
    "type": "f 0 100 0.4",
    "name": "Feeding rate",
    "group": "Energy",
    "id": "feedrate",
    "_classname": "property",
    "help": "How fast energy is created in the world"
  },
  {
    "group": "Energy",
    "type": "f 0 1000 100",
    "id": "feede0",
    "_classname": "property",
    "name": "Food's energy"
  },
  {
    "type": "s 1",
    "name": "Food's genotype",
    "group": "Energy",
    "id": "foodgen",
    "_classname": "property",
    "help": "The default food model is a simple, single part object:\n  //0\n  m:Vstyle=food\n  p:\n(this genotype is used when you leave this field blank).\nYou can specify another genotype to create \"intelligent\" or mobile food."
  },
  {
    "group": "Energy",
    "type": "f 0 100 2",
    "id": "feedtrans",
    "_classname": "property",
    "name": "Ingestion multiplier"
  },
  {
    "group": "",
    "type": "d 0 1 0",
    "id": "savedead",
    "_classname": "property",
    "name": "Save genotypes of dead creatures"
  },
  {
    "type": "d 0 1 0",
    "name": "Print structured messages",
    "group": "",
    "id": "structured_output",
    "_classname": "property",
    "help": "Structured messages are dictionaries - they are easier for automated parsing than casual messages"
  },
  {
    "type": "d 0 1 0",
    "name": "Restart after extinction",
    "group": "",
    "id": "autorestart",
    "_classname": "property",
    "help": "Restart automatically this experiment after the last creature has died?"
  },
  {
    "type": "s 1",
    "id": "notes",
    "_classname": "state",
    "help": "You can write anything here\n(it will be saved to the experiment file)",
    "name": "Notes"
  },
  {
    "type": "d",
    "flags": 16,
    "name": "Evaluated creatures",
    "id": "totaltestedcr",
    "_classname": "state",
    "help": "Total number of the creatures evaluated in the experiment"
  },
  {
    "type": "x",
    "flags": 32,
    "name": "Food locations",
    "id": "food",
    "_classname": "state",
    "help": "vector of vectors [x,y,energy]"
  }
]