[
  {
    "name": "Brain simplifier",
    "_classname": "script",
    "code": "\n//created in january 2007 by Piotr Sobkowski, psobkowski@op.pl\n//refactored in october 2009 by Maciej Komosinski\n\nglobal neuroind_1, neuroind_2;\n\nfunction main()\n{\n\tSimulator.print(\"Simplifing brain(s)...\");\n\n  if (GenePools[0].size == 0)\n  {\n    Simulator.message(\"This script needs some genotypes.\", 2);\n    return ;\n  }\n\n  var k, n;\n\n  for (var pool in GenePools)\n  {\n    var newGenotypes = Vector.new();\n\n    // tries to simplify brain for each genotype in the group\n    for (var g in pool)\n    {\n      var model = Model.newFromGeno(g.geno);\n      var brainSize = model.numneurons;\n\n      structSimplify(model);\n\n      // builds new genotype from string\n\n      var genotypeLines = String.split2(model.geno.f0genotype, \"\\n\");\n      var stringGenotype = \"\";\n      var neuroIndex = -1;\n      var neuroNewIndex = 0;\n\n      for (n = 0; n < neuroind_1.size; n++)\n      {\n        if (neuroind_1.get(n) == 0)\n          neuroind_1.set(n, -1);\n        else\n        {\n          neuroind_1.set(n, neuroNewIndex);\n          neuroNewIndex++;\n        }\n      }\n\n      var first = 1;\n\n      // analyzes each genotype line\n      for (n = 0; n < genotypeLines.size; n++)\n      {\n        var firstInLine = String.substr(genotypeLines.get(n), 0, 1);\n\n        // analyzes neuron\n        if (firstInLine == \"n\")\n        {\n          neuroIndex++;\n          if (neuroind_1.get(neuroIndex) < 0)\n          {\n            brainSize -= 1;\n            continue;\n          }\n        } // analyzes connection\n        else if (firstInLine == \"c\")\n        {\n          var cLine = String.split2(genotypeLines.get(n), \",\");\n          var cTemp = String.split2(cLine.get(0), \":\");\n\n          var vFirst = String.split2(cTemp.get(1), \"=\");\n          var vSecond = String.split(cLine.get(1), \"=\");\n\n          var cFirst = String.parseInt(vFirst.get(vFirst.size - 1));\n          var cSecond = String.parseInt(vSecond.get(vSecond.size - 1));\n\n          var u;\n          var rest = \"\";\n          for (u = 2; u < cLine.size; u++)\n          {\n            rest += \",\" + cLine.get(u);\n          }\n\n          if ((neuroind_1.get(cFirst) >= 0) && (neuroind_1.get(cSecond) >= 0))\n          {\n            if (!first)\n              stringGenotype += \"\\n\" + \"c:\" + neuroind_1.get(cFirst) + \",\" + neuroind_1.get(cSecond) + rest;\n            else\n            {\n              stringGenotype += \"c:\" + neuroind_1.get(cFirst) + \",\" + neuroind_1.get(cSecond) + rest;\n              first = 0;\n            }\n          }\n          continue;\n        }\n        if (!first)\n          stringGenotype += \"\\n\" + genotypeLines.get(n);\n        else\n        {\n          stringGenotype += genotypeLines.get(n);\n          first = 0;\n        }\n      }\n\n      // creates new geno object\n\n      var geno = Geno.newFrom(stringGenotype, 48, model.geno.name, model.geno.info);\n\n      if (brainSize < model.numneurons)\n        geno.info += \"\\nbrainSimplifier.script: Brain simplified from \" + model.numneurons + \" to \" + brainSize + \" neurons.\";\n      else\n        geno.info += \"\\nbrainSimplifier.script: Could not simplify this brain.\";\n\n      newGenotypes.add(geno);\n    }\n\n\n    // removes all old genotypes from each group\n    pool.clear();\n\n    // adds new simplified genotypes\n    for (var g in newGenotypes)\n      pool.add(g);\n  }\n}\n\n// simplifies current genotype neuron structure\nfunction structSimplify(currentModel)\n{\n  var neuroReadyToBeCopied = Vector.new();\n  var i;\n\n  for (i = 0; i < currentModel.numneurons; i++)\n  {\n    neuroReadyToBeCopied.add(0);\n  }\n\n  neuroind_1 = neuroReadyToBeCopied;\n  neuroind_2 = Vector.new();\n\n  // search for effectors\n  for (i = 0; i < currentModel.numneurons; i++)\n  {\n    var neuroType = getNeuroType(currentModel.getNeuroDef(i));\n\n    // if neuron is effector and it is not visited\n    if ( ((neuroType == \"@\") || (neuroType == \"|\")) && (!neuroind_1.get(i)) )\n      analyzeNextNeuro(i, 0, currentModel);\n  }\n\n  //analyzes further neurons\n  for (i = 0; i < neuroind_2.size; i++)\n    analyzeNextNeuro(neuroind_2.get(i), 0, currentModel);\n}\n\nfunction getNeuroType(neuro)\n{\n  return String.substr(neuro.d, 0, 1); // first sign in neuro line\n}\n\n// sets neuron ready to be copied\nfunction analyzeNextNeuro(index, counter, currentModel)\n{\n  var neuroReadyToBeCopied = neuroind_1;\n  var neuro = currentModel.getNeuroDef(index);\n\n  neuroind_1.set(index, 1);\n\n  var i;\n\n  for (i = 0; i < neuro.getInputCount; i++)\n  {\n    if ((neuro.getInputNeuroIndex(i) >= 0) &&\n        (!neuroReadyToBeCopied.get(neuro.getInputNeuroIndex(i))))\n    {\n      neuroind_2.add(neuro.getInputNeuroIndex(i));\n    }\n  }\n\n  return ;\n}\n\n",
    "help": "Removes all brain neurons that do not influence effectors. Converts genotypes to f0."
  }
]