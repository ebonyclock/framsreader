[
  {
    "name": "Neuro inspection",
    "_classname": "script",
    "code": "function main()\n{\n  @include \"neuro_insp_default.inc\" //settings of the experiment  \n  \n  if (neuronstolog.size!=statsteps.size)\n    Simulator.message(\"Length of the 'statsteps' vector different from 'neuronstolog'.\",2);\n  \n  GenePools[0].clear();\n  Populations[0].clear();\n  \n  var pop=Populations[0];\n  pop.nnsim = 1;\n  pop.enableperf = 1;\n  pop.death = 0; //don't let the creature die no matter how many steps\n  //sim_params.randinit = 0; //make NN simulation deterministic\n  \n  Simulator.import(genofile);\n  \n  var r,i,v=Vector.new();\n  for(i=0;i<statsteps.size;i++)\n\t\tv.add(Vector.new());\n  \n  for(r=0;r<repeat;r++)\n  {  \n\t\tvar cr=Populations[0].add(GenePools[0][genonr].geno);\n\t\t\n\t\tvar f=File.createDirect(logtofile,\"Neural states\");\n\t\tvar s;\n\t\tf.writeString(\"# Creature '\"+cr.name+\"', neurons probed: \"+neuronstolog+\", forced: \"+forced+\"\\n\");\n\t\t\n\t\tSimulator.start();\n\t\tfor(s=0;s<simsteps;s++)\n\t\t{\n\t\t\tsetForcedStates(cr,forced,s);\n\t\t\tf.writeString(\"\"+s+getStates(cr,neuronstolog,statsteps,s,v)+\"\\n\");\n\t\t\tSimulator.step();\n\t\t}\n\t\tSimulator.stop();\n\n\t\tf.close();\n\t\t\n\t\tPopulations[0].delete(0);\n  }\n  for(i=0;i<statsteps.size;i++)\n  {\n    Simulator.print(\"\"+neuronstolog[i]+\" \"+v[i].size+\" \"+v[i].avg+\" \"+v[i].stdev);\n    // dumping individual values\n    // for(r=0;r<v[i].size;r++) Simulator.print(\" #\"+r+\": \"+v[i][r]);\n  }\n}\n\nfunction getStates(cr,indexes,statsteps,stepnr,v)\n{\n  var j,t=\"\";\n  for(j=0;j<indexes.size;j++)\n  {\n    var neu=indexes[j],state=0;\n    if (neu_nr_ok(cr,neu,\"probe\"))\n      state=cr.getNeuro(neu).state;\n      \n    if (stepnr==statsteps[j]) v[j].add(state);\n      \n    t=t+\"\\t\"+state;\n  }\n  return t;\n}\n\nfunction setForcedStates(cr,forced,stepnr)\n{\n  var j;\n  for(j=0;j<forced.size;j+=4)\n  {\n    var neu=forced[j];\n    if (neu_nr_ok(cr,neu,\"modify\"))\n      cr.getNeuro(neu).hold=0; //by default, \"free\" all forced neurons\n  }\n  for(j=0;j<forced.size;j+=4)\n  {\n    var neu=forced[j];\n    if (stepnr>=forced[j+1] && stepnr<=forced[j+2])\n    {\n      cr.getNeuro(neu).hold=1; //this one needs to be \"held\" in this step\n      cr.getNeuro(neu).currState=forced[j+3];\n    }\n  }\n}\n\nfunction neu_nr_ok(cr,nr,oper)\n{\n  var ok=nr>=0 && nr<cr.numneurons;\n  if (ok==0)\n    Simulator.message(\"'\"+cr.name+\"' has only \"+cr.numneurons+\" neurons. You wanted to \"+oper+\" #\"+nr+\".\",2);\n  return ok;\n}\n",
    "help": "Performs a given number of simulation steps, logs neural states of selected neurons, can also enforce states of selected neurons.\nThe log file can be used for further analyses, or to draw plots in gnuplot (see neuro_insp_chart.gp) or another external program.\nSee script source for details and settings."
  }
]