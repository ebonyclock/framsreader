[
  {
    "name": "Find best genotype on average",
    "_classname": "script",
    "code": "\nfunction main()\n{\n\tmain_args(20,null);\n}\n\n\n//filenametosave==null disables file saving\nfunction main_args(min_evaluations,filenametosave)\n{\n\t// When we have indeterminism (for example when default.sim is used: random initialization of neural states and random placement of creatures),\n\t// we cannot fully trust fitness values that have not been confirmed (averaged) during multiple evaluations.\n\t// In the code below, we wait until the single best genotype is evaluated at least min_evaluations times.\n\t// No new genotypes are introduced.\n\t// Note that this mechanism is approximate - it does not evaluate ALL genotypes \"min_evaluations\" times (this would take MUCH time),\n\t// it only evaluates them until the genotype that is currently best gets evaluated at least \"min_evaluations\" times.\n\n\tvar best=GenePools[0].best();\n\tif (best==null) return; //no genotypes?\n\t\n\t// save original parameter values so they can be restored later, after temporary modifications\n\tvar saved_parameters = Simulator.export(null, 4 + 16 + 32, -1, -1);\n\n\tExpProperties.stagnation=0; //turn off stagnation detection mechanism\n\tSimulator.autosaveperiod=0; //turn off autosave\n\tExpProperties.p_mut=0; //we don't want evolution and new genotypes anymore. We only want to evaluate existing genotypes multiple times\n\tExpProperties.p_xov=0;\n\tExpProperties.p_nop=1;\n\tExpProperties.selrule=2; //tournament(2) - weak pressure, maybe this should depend on the number of genotypes\n\tExpProperties.delrule=0; //random negative selection - just in case, but this should not be relevant because...\n\tExpProperties.capacity=100000; //...we set gene pool capacity so big that negative selection will rarely be needed\n\n\t//if we have a mix of genotypes with instances=0 (non-evaluated) and instances>0 (evaluated),\n\t//set instances=1 for those evaluated genotypes (instead of possibly larger values) so they do not dominate non-evaluated genotypes during selection, and non-evaluated genotypes get a fair chance of being evaluated\n\tvar found_instanceless=0;\n\tfor(var g in GenePools[0])\n\t\tif (g.instances==0)\n\t\t\tfound_instanceless=1;\n\tif (found_instanceless)\n\t\tfor(var g in GenePools[0])\n\t\t\tif (g.instances>0)\n\t\t\t\tg.instances=1;\n\t\n\tvar lasttime=0; //used only to print messages on progress\n\tSimulator.start();\n\twhile (Simulator.running && best.instances<min_evaluations) //repeat until the best genotype will be evaluated at least min_evaluations times\n\t{\n\t\tif (Math.time-lasttime>30) //every 30 sec.\n\t\t{\n\t\t\tSimulator.print(\"...best fitness = %g (x%g) among %d genotypes (%d instances)\" % best.fit % best.instances % GenePools[0].size % GenePools[0].genotype_instances);\n\t\t\tlasttime=Math.time;\n\t\t}\n\t\tvar totaltestedcr=ExpState.totaltestedcr;\n\t\twhile (totaltestedcr==ExpState.totaltestedcr) // simulate many steps after which 'best' may change because one creature has been evaluated. This helps avoid frequent unnecessary calls to GenePools[0].best()\n\t\t\tSimulator.step();\n\t\tbest=GenePools[0].best();\n\t}\n\tSimulator.stop();\n\tSimulator.print(\"Best fitness = %g (x%g)\" % best.fit % best.instances);\n\tSimulator.print(\"Best genotype = \" + best.genotype);\n\t\n\tGenePools[0].clear(); //remove all...\n\tbest.moveTo(GenePools[0]); //...then restore best...\n\t\n\tSimulator.import(\"string://\" + saved_parameters, 4 + 8 + 16); //restore original parameter values\n\t\n\tif (filenametosave!=null)\n\t\tSimulator.save(filenametosave); //save the best genotype in a file for further inspection\n}\n\n",
    "help": "Finds the single best genotype in the gene pool, evaluating all genotypes and averaging fitness from the requested number of evaluations.\nUsage:\nUserScripts.script_Find_best_on_average_args(100,\"file_with_best.expt\");"
  }
]