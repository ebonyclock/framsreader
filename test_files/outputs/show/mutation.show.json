[
  {
    "name": "Mutation chain",
    "_classname": "show",
    "info": "Presents a chain of subsequent mutants.",
    "expdef": "standard",
    "code": "\nconst MAXCREATURES = 5;\n\nglobal g_lasttime;\nglobal g_lastdif;\nglobal g_circle;\n\nfunction onLoad()\n{\n  GenePools[0].clear();\n  Populations[1].clear();\n  Populations[0].clear();\n  Math.seed = Math.time;\n  g_lasttime = Math.time;\n  g_circle = 0.0;\n  TrackingCam.cam_zoom = 0.3;\n  TrackingCam.cam_chspeed = 0.1;\n  TrackingCam.cam_change = 2;\n  ShowProperties_restart_f1_call();\n  ShowProperties.differ = 1;\n  World.wrldtyp = 0;\n  World.wrldsiz = 40;\n  World.wrldwat = -1.0;\n  World.wrldbnd = 0;\n  ExpProperties.feed = 0;\n  ExpProperties.MaxCreated = 1;\n  GLDisplay.desiredsimspeed = 30;\n}\n\nfunction restartWith(gen)\n{\n  g_lasttime = Math.time;\n  g_circle = 0.0;\n  var pop=Populations[0];\n  pop.clear();\n  pop.add(gen);\n  pop.death = 0;\n  pop.energy = 0;\n  pop.selfmask = 0x10001; pop.othermask = 0x20000;\n  makeSelection();\n  updateBanner();\n}\n\nfunction restartWithSimplest(format)\n{\n\tvar simplest=GenMan.getSimplest(format);\n  restartWith(simplest.genotype);\n}\n\nfunction updateBanner()\n{\n  if (CreatureSelection.count > 1)\n  {\n    var curr = CreatureSelection.get(0); //in the selection, current is #0, previous is #1; see function makeSelection()\n    var prev = CreatureSelection.get(1);\n    GLDisplay.banner = \"Previous genotype:\\n\" + prev.genotype + \"\\nNew mutant created (phenetic difference = \" + g_lastdif + \"):\\n\" + curr.genotype;\n  }\n  else if (CreatureSelection.count > 0)\n  {\n    var initial = CreatureSelection.get(0);\n    GLDisplay.banner = \"This is the initial genotype:\\n\" + initial.genotype;\n  }\n  else\n    GLDisplay.banner = \"?!\";\n}\n\nfunction createMutant(threshold) //same function in mutation.show, biomorph.show and AL-biomorph.show :/\n{\n  var pop=Populations[0];\n  var cr=pop[pop.size-1];\n  var parentx = cr.bboxLow.x + (cr.bboxSize.x / 2.0), parenty = cr.bboxLow.y + (cr.bboxSize.y / 2.0);\n  var mut_count = 0;\n  var distance;\n  var original_g = cr.geno; // previous genotype\n  var new_g = original_g;\n  var max_retry = 20;\n  if (original_g.format == \"F\") //'F' format for which 1) structural similary is not very useful and 2) conversion fF->f0 takes a lot of time for multiple-Part creatures, so let's not do this many times here\n  \tmax_retry = 5;\n  for(var retry=0; retry<max_retry; retry++)\n  {\n    // CLI.println(\"mutating \"+retry+\": \"+new_g.genotype);\n    new_g=GenMan.mutate(new_g);\n    mut_count++;\n    if (!new_g.is_valid)\n    {\n      // CLI.println(\"invalid mutant: \"+new_g.genotype);\n      new_g=original_g;\n      mut_count = 0;\n      continue;\n    }\n    //\tCLI.println(original_g.genotype+\" ... \"+new_g.genotype);\n    if (threshold < 0.001) //no threshold\n      break;\n    distance = ModelSimilarity.evaluateDistance(original_g, new_g);\n    //\tCLI.println(\"distance=\"+distance);\n    if (distance >= threshold)\n      break;\n  }\n  if (mut_count>1) //when there was a sequence of many mutations, we don't know how many % of genotype mutated, so the information in new_g.info is useless (it only concerns the last mutation in the sequence, and creature names in the sequence are not auto-generated).\n    new_g.info=\"'\"+original_g.name+\"' after \"+mut_count+\" mutations\";\n  if (!new_g.is_valid)\n  {\n    CLI.println(\"invalid mutant!\");\n  }\n  else\n  {\n    g_lastdif = distance;\n    var cr = pop.add(new_g);\n    g_circle = g_circle + 0.3;\n    var dst = (cr.bboxSize.x + cr.bboxSize.y + cr.bboxSize.z) / 3.0 + 2.0;\n    var px = (parentx + Math.sin(g_circle) * dst) * 0.9 + 0.1 * (World.wrldsiz / 2);\n    var py = (parenty + Math.cos(g_circle) * dst) * 0.9 + 0.1 * (World.wrldsiz / 2);\n    cr.locationSetBboxLow(px - cr.bboxSize.x / 2, py - cr.bboxSize.y / 2, -0.99);\n    makeSelection();\n    updateBanner();\n  }\n}\n\nfunction onShowStep()\n{\n  TrackingCam.cam_dir += 0.01;\n  if ((Math.time - g_lasttime) > (2.0/GLDisplay.userspeed))\n  {\n    createMutant([0, 0.5, 2.0, 10.0][ShowProperties.differ]);\n    g_lasttime = Math.time;\n    var pop=Populations[0];\n    if (pop.size > MAXCREATURES)\n       pop.delete(0);\n  }\n}\n\nglobal itsmyselection;\n\nfunction makeSelection()\n{\n  CreatureSelection.clear();\n  var pop=Populations[0];\n  var n = pop.size;\n  if (n > 0)\n  {\n    itsmyselection = 1;\n    CreatureSelection.add(pop[n - 1]);\n  }\n  if (n > 1)\n  {\n    itsmyselection = 1;\n    CreatureSelection.add(pop[n - 2]);\n  }\n}\n\nfunction onSelectionChange()\n{\n  if (CreatureSelection.count > 0)\n  {\n    if (itsmyselection)\n    {\n      itsmyselection = 0;\n      return ;\n    }\n    makeSelection();\n  }\n}\n\nfunction ShowProperties_restart_f1_call() { restartWithSimplest(\"1\"); }\nfunction ShowProperties_restart_f9_call() { restartWithSimplest(\"9\"); }\nfunction ShowProperties_restart_f4_call() { restartWithSimplest(\"4\"); }\nfunction ShowProperties_restart_f0_call() { restartWithSimplest(\"0\"); }\nfunction ShowProperties_restart_fF_call() { restartWithSimplest(\"F\"); }\n\n\nfunction ShowProperties_restartquadruped_call()\n{\n  restartWith(\"MX[@*:-.4,2:-2.890,1 :-1.808](RX(FX,),MX[@-1 :1.849,0:3.094,0:-1.387][|-1 :1.287,0:.5](rX(,X),,RX(X,)),rX(,FX))\");\n}\n\n"
  },
  {
    "id": "differ",
    "_classname": "property",
    "type": "d 0 3 ~Single mutation~Forced: small~Forced: medium~Forced: big",
    "name": "Mutant variation"
  },
  {
    "id": "restartquadruped",
    "_classname": "property",
    "type": "p",
    "name": "Restart with a quadruped creature"
  },
  {
    "id": "restart_f1",
    "_classname": "property",
    "type": "p",
    "name": "Restart with a simple f1 genotype (recurrent encoding)"
  },
  {
    "id": "restart_f9",
    "_classname": "property",
    "type": "p",
    "name": "Restart with a simple f9 genotype (perpendicular encoding)"
  },
  {
    "id": "restart_f4",
    "_classname": "property",
    "type": "p",
    "name": "Restart with a simple f4 genotype (developmental encoding)"
  },
  {
    "id": "restart_f0",
    "_classname": "property",
    "type": "p",
    "name": "Restart with a simple f0 genotype (low-level encoding)"
  },
  {
    "id": "restart_fF",
    "_classname": "property",
    "type": "p",
    "name": "Restart with a simple fF genotype (Foraminifera encoding)"
  }
]