[
  {
    "code": "\nglobal g_evaluations; //Vector to hold subsequent genotype fitness values\nglobal g_time0; //used for estimating simulation time needed for evaluation\nglobal g_plan, g_current;\n\nfunction onExpDefLoad()\n{\n\t// define genotype and creature groups\n\tGenePools[0].name = \"Genotypes\";\n\tupdate_fitformula();\n\n\tvar p = Populations[0];\n\tp.name = \"Creatures\";\n\tp.nnsim = 2;\n\tp.enableperf = 2;\n\tp.selfmask = 0x10001;\n\tp.othermask = 0x20001;\n\n\tp = Populations.addGroup(\"Food\");\n\tp.nnsim = 0;\n\tp.enableperf = 0;\n\tp.selfmask = 0x20002;\n\tp.othermask = 0x10002;\n\n\t//setting non-default values:\n\tExpProperties.evalcount = 10;\n\tExpProperties.p_nop = 1;\n\tExpProperties.p_mut = 0;\n\tExpProperties.p_xov = 0;\n}\n\nfunction onExpInit_Single()\n{\n\tPopulations[0].clear();\n\tPopulations[1].clear();\n//  GenePools.clearGroup(0);\n//  GenePools.newGenotype(ExpProperties.initialgen);\n//  GenePools.copySelected(0);\n\tExpState.totaltestedcr = 0;\n\tExpProperties_cleardata_call();\n\tg_evaluations = [];\n\tg_time0 = null;\n}\n\nfunction useNextFromPlan()\n{\n\tif (g_plan && (g_plan.size > 0))\n\t{\n\t\tg_current = g_plan[0];\n\t\tSimulator.print(\"Using plan: \" + g_current);\n\t\tg_plan.remove(0);\n\t\tif (g_current[0] != \"\")\n\t\t\tSimulator.import(g_current[0]);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nfunction onExpInit()\n{\n\tvar lines = String.split2(String.replace(ExpProperties.evalplan, \"\\r\", \"\"), \"\\n\");\n\tg_plan = [];\n\tfor (var line in lines)\n\t{\n\t\tline = String.replace(line, \" \", \"\");\n\t\tvar file_par = String.split(line, \":\");\n\t\tif (file_par.size == 2)\n\t\t{\n\t\t\tvar par = String.split(file_par[1], \",\");\n\t\t\tg_plan.add([file_par[0], par]);\n\t\t}\n\t}\n\n\tif (g_plan.size == 0)\n\t{\n\t\tg_plan = null;\n\t\tSimulator.message(\"Evaluation plan is invalid\", 2);\n\t\tExpState.totaltestedcr = GenePools[0].size;\n\t}\n\telse\n\t{\n\t\tuseNextFromPlan();\n\t\tif (g_current)\n\t\t\tfor(var g in GenePools[0])\n\t\t\t\tg.data[ExpProperties.evalsavedata] = {};\n\t\tonExpInit_Single();\n\t}\n}\n\n@include \"standard_placement.inc\"\n\nfunction onBorn(cr)\n{\n\tif (g_time0 == null) g_time0 = Math.time;\n\tvar retry = 50; //try 50 times\n\tvar placed_ok = 0;\n\twhile (retry--)\n\t{\n\t\tvar trycentral = (ExpProperties.placement == 1) && (retry == 19); //place central only in the first trial\n\t\tplaceCreatureRandomly(cr, trycentral, ExpProperties.rotation);\n\t\tif (!cr.boundingBoxCollisions(0))\n\t\t{\n\t\t\tplaced_ok = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!placed_ok)\n\t\tSimulator.message(\"onBorn() could not avoid collisions.\", 1);\n\n\tif (cr.population.index == 0)\n\t{\n\t\t// creature\n\t\tvar n = cr.numjoints;\n\t\tif (n == 0) n = cr.numparts; //creatures with only one Part will live just as long as one-stick creatures\n\t\tcr.idleen = ExpProperties.e_meta * n;\n\t\tcr.energy0 = cr.energy0 * ExpProperties.Energy0 * n;\n\t\tcr.energy = cr.energy0;\n\t}\n\telse\n\t{\n\t\t// food\n\t\tcr.name = \"Food\";\n\t\tcr.idleen = 0;\n\t\tcr.energy0 = ExpProperties.feede0;\n\t\tcr.energy = cr.energy0;\n\t}\n}\n\nfunction addfood()\n{\n\tif (ExpProperties.foodgen == \"\")\n\t\treturn Populations[1].add(\"//0\\nm:Vstyle=food\\np:\");\n\telse\n\t\treturn Populations[1].add(ExpProperties.foodgen);\n}\n\nfunction onStep()\n{\n\tif (ExpState.totaltestedcr >= GenePools[0].size) //end condition tested onStep because it can sometimes restart the experiment which is fatal in onCreatureDied\n\t{\n\t\tif (g_plan == null) //invalid intitial conditions (no plan)\n\t\t\tSimulator.stop();\n\t\telse if (useNextFromPlan())\n\t\t{\n\t\t\tonExpInit_Single();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSimulator.print(\"Evaluation complete.\");\n\t\t\tSimulator.stop();\n\t\t\tif (ExpProperties.evalsavefile != \"\")\n\t\t\t\tprintStats(ExpProperties.evalsavefile);\n\t\t}\n\t}\n\n\telse\n\n\t\tif (Populations[0].size < ExpProperties.MaxCreated)\n\t\t{\n\t\t\tif (GenePools[0].size == 0)\n\t\t\t{\n\t\t\t\tSimulator.stop();\n\t\t\t\tSimulator.message(\"This experiment is designed to build creatures from genotypes, but the GenePool is empty.\", 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar g = selectedForCreation();\n\t\t\t\t//Simulator.print(\"g=\"+g);\n\t\t\t\tif (g)\n\t\t\t\t{\n\t\t\t\t\tif (g.is_valid)\n\t\t\t\t\t\tPopulations[0].add(g);\n\t\t\t\t\telse\n\t\t\t\t\t\tSimulator.message(\"invalid genotype - ignored: \" + g.info, 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tSimulator.message(\"no genotype selected\", 1);\n\t\t\t}\n\t\t}\n\n\tif (ExpProperties.aging > 0)\n\t{\n\t\tfor(var cr in Populations[0])\n\t\t\tcr.idleen = ExpProperties.e_meta * cr.numjoints\n\t\t\t            * Math.exp((0.6931471806 * cr.lifespan) / ExpProperties.aging);\n\t}\n\n\tif (Populations[1].size < ExpProperties.feed)\n\t\taddfood();\n}\n\nfunction updatePerformanceWithPopSize(cr)\n{\n\tvar GROUP_IDENTICAL_GENOTYPES = 1; //do you want identical genotypes to be grouped as one Genotype object (with instances>1 and averaged performances)?\n\tvar g = null;\n\tif (GROUP_IDENTICAL_GENOTYPES)\n\t\tg = GenePools[0].findGenotype(cr.geno); //will be either null (if no cr.geno exists in GenePools[0]) or some existing Genotype\n\n\tif (g == null) //cr.geno not found, which means that we have to add a new Genotype\n\t{\n\t\tg = Genotype.newFromCreature(cr);\n\t\tg.num = 0; // 0 = it will be filled automatically\n\t\tg.moveTo(GenePools[0]);\n\t\tg.instances = 0;\n\t}\n\n\t//standard-eval specific performance handling moved here from onDied function:\n\tvar save_names = [\"instances\", \"lifespan\", \"velocity\", \"distance\", \"vertvel\", \"vertpos\"], save_values = {};\n\tfor(var n in save_names) save_values[n] = g.[n]; //shame we can't just clone the Genotype object :-P\n\tg.instances = 0; //trick to have the fitness value for the single genotype instance...\n\tg.addPerformanceFromCreature(cr); //averages performances of \"g\" according to instances and increments instances (here: no average, instances=0)\n\tg_evaluations.add(g.fit); //...which is added to the vector\n\tfor(var n in save_names) g.[n] = save_values[n]; //undo and add performance again, to calculate all other values correctly (g.fit is already saved for later)\n\tg.addPerformanceFromCreature(cr); //averages performances of \"g\" according to instances and increments instances\n\n\tif (g.instances >= ExpProperties.evalcount)\n\t{\n\t\tg.instances = 0;\n\t\tvar time = (Math.time - g_time0) / ExpProperties.evalcount;\n\t\tif (g_current)\n\t\t{\n\t\t\tvar p = {};\n\t\t\tfor(var pname in g_current[1])\n\t\t\t{\n\t\t\t\tvar value;\n\t\t\t\tswitch(pname)\n\t\t\t\t{\n\t\t\t\tcase \"fit\":\n\t\t\t\t\tvalue = g_evaluations.avg;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fit_stdev\":\n\t\t\t\t\tvalue = g_evaluations.stdev;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"time\":\n\t\t\t\t\tvalue = time;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvalue = g.[pname];\n\t\t\t\t}\n\t\t\t\tp[pname] = value;\n\t\t\t\tg.data[ExpProperties.evalsavedata][g_current[0]] = p;\n\t\t\t}\n\t\t}\n\t\tif (Math.time - g_time0 > 2) Simulator.print(\"%d% complete...\" % (100 * ExpState.totaltestedcr / GenePools[0].size));\n\t\tg_time0 = null;\n\t\tg_evaluations.clear();\n\t\tExpState.totaltestedcr++;\n\t}\n\t//LimitGenePool();\n\t//Simulator.autosave();\n}\n\nfunction printStats(filename)\n{\n\tvar info;\n\tvar f = File.create(filename, \"Evaluated genotypes\");\n\tf.writeString(\"[\\n\");\n\tvar first = 1;\n\tfor (var g in GenePools[0])\n\t{\n\t\tif (first) first = 0; else f.writeString(\",\\n\");\n\t\tinfo = g.data[ExpProperties.evalsavedata];\n\t\tf.writeString(\"{\\\"num\\\":\" + g.num + \",\\\"name\\\":\\\"\" + g.name + \"\\\",\\\"evaluations\\\":\" + String.toJSON(info) + \"}\");\n\t}\n\tf.writeString(\"\\n]\\n\");\n\tf.close();\n}\n\nfunction onDied(cr)\n{\n\tif (cr.population.index != 0)\n\t\treturn ; // ignore food\n\tupdatePerformanceWithPopSize(cr);\n}\n\nfunction selectedForDeletion()\n{\n\tif (ExpProperties.delrule == 0)\n\t\treturn GenePools.random();\n\tif (ExpProperties.delrule == 1)\n\t\treturn GenePools.revroulette();\n\treturn GenePools.worst();\n}\n\nfunction selectedForCreation()\n{\n\treturn GenePools[0][ExpState.totaltestedcr];\n}\n\nfunction onFoodCollision()\n{\n\tvar e = Collision.Part2.ing * ExpProperties.feedtrans;\n\t//Simulator.print(\"transferring \"+e+\" from \"+Collision.Creature1.name+\" to \"+Collision.Creature2.name);\n\tCollision.Creature1.transferEnergyTo(Collision.Creature2,e);\n}\n\nfunction ExpProperties_cleardata_call()\n{\n\tfor(var g in GenePools[0])\n\t\tg.instances = 0;\n\tSimulator.print(\"Performance data reset.\");\n}\n\nfunction limitPopulation(pop, n)\n{\n\tn = pop.size - n;\n\twhile (n > 0)\n\t{\n\t\tpop.delete(pop.size - 1);\n\t\tn--;\n\t}\n}\n\nfunction ExpProperties_MaxCreated_set()\n{\n\tlimitPopulation(Populations[0], ExpProperties.MaxCreated); //creatures\n}\n\nfunction ExpProperties_feed_set()\n{\n\tlimitPopulation(Populations[1], ExpProperties.feed); //food\n}\n\n\n@include \"standard_fitformula.inc\"\n@include \"standard_events.inc\"\n@include \"standard_loadsave.inc\"\n\n",
    "info": "Use this experiment to evaluate all genotypes one by one.\nUse the \"Repeat count\" parameter to set the required number of evaluations of each genotype.\n\nThe genotypes for evaluation _must_ be different. TODO why? hopefully this assumption is no longer required?\n\nFirst load your genotypes for evaluation, then define the evaluation plan, initialize the experiment, and finally run the simulation to perform all evaluations.\n\nAfter evaluation, the selected key in the Genotype.data Dictionary (\"evaluation\" by default) contains a Dictionary of results. These results can also be saved to a file, as defined by the \"evalsavefile\" parameter.\n",
    "_classname": "expdef",
    "name": "Multiple evaluation of loaded genotypes"
  },
  {
    "type": "p",
    "id": "cleardata",
    "_classname": "property",
    "help": "Sets the number of instances of each genotype to zero (as if it has never been evaluated).\nGenotype performance values stay intact, yet they are meaningless if a genotype has no instances.",
    "name": "Clear performance info"
  },
  {
    "type": "s 1",
    "id": "notes",
    "_classname": "state",
    "help": "You can write anything here\n(it will be saved to the experiment file)",
    "name": "Notes"
  },
  {
    "type": "d",
    "flags": 16,
    "name": "Evaluated creatures",
    "id": "totaltestedcr",
    "_classname": "state",
    "help": "Total number of creatures evaluated in the experiment"
  },
  {
    "type": "d",
    "id": "creaturesgrouploaded",
    "_classname": "state",
    "flags": 34,
    "name": "creaturesgrouploaded"
  }
]