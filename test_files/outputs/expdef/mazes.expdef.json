[
  {
    "name": "Walking in a maze",
    "_classname": "expdef",
    "info": "This experiment definition can be used to evaluate (and evolve) creatures moving between two specified points in a maze. These points are indicated by start and target marks (in the second population).\n\nGenotype's user1 field (which acts as a maximized fitness) contains\n- energy left (when target found during lifespan)\n- distance to the target (as a negative value) when a creature died away from the target.\n\nPress \"SHIFT\" and click the right mouse button to manually set the start and finish points.\n\nUse maze[1,2].sim settings for this experiment definition.\n",
    "code": "\n//by MacKo, 2004-2005\n\n//todo:\n//food-creature collisions\n//random start/finish points\n\nglobal startx, starty, targetx, targety; //start and target points in a maze\n\nfunction onExpDefLoad()\n{\n  // define genotype and creature groups\n  GenePools[0].name = \"Genotypes\";\n  update_fitformula();\n\n  var p=Populations[0];\n  p.name = \"Creatures\";\n  p.nnsim = 1;\n  p.enableperf = 1;\n  p.death = 1;\n  p.energy = 1; \n  p.perfperiod = 5; //test location (onUpdate) each 5 simulation steps\n  p.selfmask = p.othermask = 0;\n\n  p=Populations.addGroup(\"Food\");\n  p.nnsim = 0;\n  p.enableperf = 0;\n  p.death = 1;\n  p.energy = 1; \n  p.selfmask = p.othermask = 0;\n\n  ExpProperties.initialgen = \"X\";\n  ExpProperties.capacity = 200;\n  ExpProperties.delrule = 0;\n  ExpProperties.MaxCreated = 1;\n  ExpProperties.p_nop = 1;\n  ExpProperties.p_mut = 0;\n  ExpProperties.p_xov = 0;\n  ExpProperties.xov_mins = 0;\n  ExpProperties.selrule = 2;\n  ExpProperties.cr_c = 0;\n  ExpProperties.cr_life = 0;\n  ExpProperties.cr_v = 1;\n  ExpProperties.cr_gl = 0;\n  ExpProperties.cr_joints = 0;\n  ExpProperties.cr_nnsiz = 0;\n  ExpProperties.cr_nncon = 0;\n  ExpProperties.cr_di = 0;\n  ExpProperties.cr_vpos = 0;\n  ExpProperties.cr_vvel = 0;\n  ExpProperties.cr_norm = 0;\n  ExpProperties.cr_simi = 0;\n  ExpProperties.Energy0 = 1000;\n  ExpProperties.e_meta = 0.01; //life span: 100 000 steps\n  ExpProperties.feed = 0;\n  ExpProperties.feede0 = 200;\n  ExpProperties.feedtrans = 1;\n  ExpProperties.placement = 0;\n  ExpProperties.creath = 0.1;\n  ExpProperties.foodgen = \"\";\n  ExpState.totaltestedcr = 0;\n\n  ExpProperties.targetradius = 2;\n  ExpProperties.startxlist = \"\";\n  ExpProperties.startylist = \"\";\n  ExpProperties.startheadings = \"\";\n  ExpProperties.targetxlist = \"\";\n  ExpProperties.targetylist = \"\";\n}\n\nfunction onExpInit()\n{\n  Populations[0].clear();\n  Populations[1].clear();\n  GenePools[0].clear();\n  GenePools[0].add(ExpProperties.initialgen);\n  ExpState.totaltestedcr = 0;\n  addmark(0);\n  addmark(1); //ensure there are two marks\n  startx = starty = 3.0; //temp\n  targetx = targety = 6.0; //temp\n  updateMarks();\n}\n\nfunction world_pos(map_pos, mapsize) //converts map-based position (center of the field) into absolute world coordinate\n{\n  return (1.5 + map_pos) / (2.0 + mapsize - 4.0)*World.wrldsiz;\n}\n\nfunction placement(cr)\n{\n  //select one of the provided locations, each in turn, based on ExpState.totaltestedcr\n\n  var xx = String.split(ExpProperties.startxlist, \",\");\n  var yy = String.split(ExpProperties.startylist, \",\");\n  //WAITING FOR SZYMON - TODO: split(\"\") returns 1 element\n  if (xx.size == 0)\n  {\n    Simulator.message(\"Starting positions not defined!\", 2);\n    return ;\n  }\n  if (xx.size != yy.size)\n    Simulator.message(\"The number of start X positions differs from the number of Y positions!\", 2);\n  startx = xx[ExpState.totaltestedcr % xx.size];\n  starty = yy[ExpState.totaltestedcr % xx.size];\n  startx = world_pos(float(startx), WorldMap.xsize);  //float() converts any strange values, like null or \"\", to 0.0, and ints to floats\n  starty = world_pos(float(starty), WorldMap.ysize);\n  var z = WorldMap.getHeight(startx, starty);\n  if (z > 0)\n    Simulator.message(\"The \" + (ExpState.totaltestedcr % xx.size) + \"th starting position elevated over the zero level: \" + z, 1);\n  if (World.wrldwat > z) // water here!\n  {\n    if (ExpProperties.creath > 0)\n      z = World.wrldwat + ExpProperties.creath;\n    else\n      z = (1.0 + ExpProperties.creath) * World.wrldwat - z * ExpProperties.creath;\n  }\n  else                 // land area\n  {\n    if (ExpProperties.creath > 0)\n      z += ExpProperties.creath;\n  }\n\n  cr.locationSetBboxLow(startx - cr.bboxSize.x / 2, starty - cr.bboxSize.y / 2, z - 0.999);\n\n  //rotate to follow the provided (or not) heading\n  xx = String.split(ExpProperties.startheadings, \",\");\n  cr.rotate(0, 0, (float(xx[ExpState.totaltestedcr % xx.size])) / 180.0*Math.pi);\n\n  //now set the target mark position\n  xx = String.split(ExpProperties.targetxlist, \",\");\n  yy = String.split(ExpProperties.targetylist, \",\");\n\n  if (xx.size == 0)\n  {\n    Simulator.message(\"Target positions not defined!\", 2);\n    return ;\n  }\n  if (xx.size != yy.size)\n    Simulator.message(\"The number of target X positions differs from the number of Y positions!\", 2);\n  targetx = xx[ExpState.totaltestedcr % xx.size];\n  targety = yy[ExpState.totaltestedcr % xx.size];\n  targetx = world_pos(float(targetx), WorldMap.xsize);  //float() converts any strange values, like null or \"\", to 0.0, and ints to floats\n  targety = world_pos(float(targety), WorldMap.ysize);\n\n  updateMarks();\n}\n\nfunction onCreaturesBorn(cr)\n{\n    placement(cr); //collisions not handled!\n    if (!cr.boundingBoxCollisions(0))\n      Simulator.message(\"onBorn() could not avoid collisions.\", 1);\n    var n=cr.numjoints;\n    if (n==0) n=cr.numparts; //creatures with only one Part will live just as long as one-stick creatures\n    cr.idleen = ExpProperties.e_meta * n;\n    cr.energy0 = cr.energy0 * ExpProperties.Energy0 * n;\n    cr.energy = cr.energy0;\n}\n\nfunction onFoodBorn(cr)\n{\n    if (String.indexOf(cr.genotype, \"#start\") >= 0)\n    {\n      cr.name = \"Start\";\n      cr.user1 = 1; //user1 - can also be used for smelling start or target\n    }\n    else if (String.indexOf(cr.genotype, \"#target\") >= 0)\n    {\n      cr.name = \"Target\";\n      cr.user1 = 2;\n    }\n    else\n      cr.name = \"Food\";\n    cr.locationSetBboxLow(Math.rnd01*World.wrldsiz - cr.bboxSize.x / 2, Math.rnd01*World.wrldsiz / 2 - cr.bboxSize.y / 2, 4);\n    cr.idleen = 0;\n    cr.energy0 = ExpProperties.feede0;\n    cr.energy = cr.energy0;\n}\n\n\nfunction distanceToTarget(cr)\n{\n  return Math.sqrt( (cr.bboxCenter.x - targetx) * (cr.bboxCenter.x - targetx) +\n                    (cr.bboxCenter.y - targety) * (cr.bboxCenter.y - targety) );\n}\n\nfunction onCreaturesUpdate(cr)\n{\n  //\"kill\" a creature when it is close enough to the target (=mission completed)\n  var dist = distanceToTarget(cr);\n  if (dist < ExpProperties.targetradius)\n  {\n    cr.user1 = cr.energy / cr.numjoints; //how much energy left (the more, the better)\n    // Simulator.message(\"Target found, distance=\"+dist+\", energy level=\"+cr.user1,0);\n    cr.energy = 0; //shall die\n  }\n}\n\nfunction addfood()\n{\n  if (ExpProperties.foodgen == \"\")\n    return Populations[1].add(\"//0\\nm:Vstyle=food\\np:\");\n  else\n    return Populations[1].add(ExpProperties.foodgen);\n}\n\nfunction addmark(finish)\n{\n  for (var cr in Populations[1])\n    if (cr.user1 == finish + 1)\n      return cr; //already exists! no need to add.\n  var color, type;\n  if (finish == 0)\n    color = \"0xffffff\";\n  else\n    color = \"0x00ff00\";\n  if (finish == 0)\n    type = \"#start\";\n  else\n    type = \"#target\"; //cludge to distinguish start/target from food\n  return Populations[1].add(\"//0\\n\" + type + \"\\nm:Vstyle=mark(color=\" + color + \")\\np:\");\n}\n\nfunction updateMarks()\n{\n  for (var c in Populations[1])\n  {\n    if (c.user1 == 1)\n      c.locationSetBboxLow(startx - c.bboxSize.x / 2, starty - c.bboxSize.y / 2, c.bboxLow.z);\n    if (c.user1 == 2)\n      c.locationSetBboxLow(targetx - c.bboxSize.x / 2, targety - c.bboxSize.y / 2, c.bboxLow.z);\n  }\n}\n\nfunction onStep()\n{\n  if (Populations[0].size < ExpProperties.MaxCreated)\n  {\n    var g=selectGenotype();\n    if (g)\n      {\n      if (g.is_valid)\n        Populations[0].add(g);\n      else\n        Simulator.message(\"invalid genotype - ignored: \" + g.name + \" \" + g.info, 1);\n      }\n    else\n      Simulator.message(\"no genotype selected\", 1);\n  }\n\n  if (ExpProperties.aging > 0)\n  {\n    for(var cr in Populations[0])\n      cr.idleen = ExpProperties.e_meta * cr.numjoints * Math.exp((0.6931471806 * cr.lifespan) / ExpProperties.aging);\n  }\n\n  if (Populations[1].size < ExpProperties.feed)\n    addfood();\n}\n\nfunction updatePerformanceWithPopSize(cr)\n{\n  var GROUP_IDENTICAL_GENOTYPES = 1; //do you want identical genotypes to be grouped as one Genotype object (with instances>1 and averaged performances)?\n  var g = null;\n  if (GROUP_IDENTICAL_GENOTYPES)\n    g = GenePools[0].findGenotype(cr.geno); //will be either null (if no cr.geno exists in GenePools[0]) or some existing Genotype\n  \n  if (g == null) //cr.geno not found, which means that we have to add a new Genotype\n  {\n    g=Genotype.newFromCreature(cr);\n    g.num = 0; // 0 = it will be filled automatically\n    g.moveTo(GenePools[0]);\n    g.instances = 0;\n  }\n  if (cr.user1 == null)\n    cr.user1 = -distanceToTarget(cr); //died because all energy consumed\n  if (g.instances == 0)\n    g.user1 = cr.user1;\n  else\n    g.user1 = (float(g.user1) * g.instances + cr.user1) / (g.instances + 1); //average\n  // Want to copy customized values from Creature user fields to Genotype user fields? Do it here: g.user2 = cr.user2;\n  // Want to take instances into account? Do it here: g.user2 = (float(g.user2) * g.instances + cr.user2) / (g.instances + 1);\n  g.addPerformanceFromCreature(cr); //averages performances of \"g\" according to instances and increments instances\n}\n\nfunction onCreaturesDied(cr)\n{\n  ExpState.totaltestedcr++;\n  updatePerformanceWithPopSize(cr);\n  LimitGenePool();\n  Simulator.checkpoint();\n}\n\n@include \"standard_select.inc\"\n\nfunction selectGenotype() //returns Genotype object\n{\n  var sel, selected;\n  sel = (ExpProperties.p_nop + ExpProperties.p_mut + ExpProperties.p_xov) * Math.rnd01;\n  if (sel < ExpProperties.p_nop)\n    return selectedForCreationInPool(GenePools[0]);\n  else\n  {\n    sel = sel - ExpProperties.p_nop;\n    if (sel < ExpProperties.p_mut)\n    {\n      selected=selectedForCreationInPool(GenePools[0]);\n      if (selected)\n        {\n        var g=Genotype.newFromGeno(GenMan.mutate(selected.geno));\n        g.gnum=selected.gnum+1; //generation\n        return g;\n        }\n      return null;\n    }\n    else\n    {\n      selected=selectedForCreationInPool(GenePools[0]);\n      var other=selectedForCreationInPool(GenePools[0]);\n      if (ExpProperties.xov_mins > 0.0)\n        other = selectedSimilarInPool(GenePools[0]);\n      else\n        other = selectedForCreationInPool(GenePools[0]);\n      if ((selected!=null) && (other!=null))\n      \t{\n\tvar g=Genotype.newFromGeno(GenMan.crossOver(selected.geno, other.geno));\n\tg.gnum=Math.max(selected.gnum,other.gnum)+1; //generation\n        return g;\n\t}\n      else\n        {\n        Simulator.print(\"crossover - second genotype not found?\");\n\treturn null;\n        }\n    }\n  }\n}\n\nfunction onFoodCollision() //needs updating, currently *all* collisions are ignored\n{\n  var e = Collision.Part2.ing * ExpProperties.feedtrans;\n  //Simulator.print(\"transferring \"+e+\" from \"+Collision.Creature1.name+\" to \"+Collision.Creature2.name);\n  Collision.Creature1.transferEnergyTo(Collision.Creature2,e);\n}\n\nfunction ExpProperties_cleardata_call()\n{\n  for (var g in GenePools[0])\n    g.instances = 0;\n  Simulator.print(\"Performance data reset.\");\n}\n\nfunction LimitGenePool()\n{\n  var pool=GenePools[0];\n  if (pool.genotype_instances > (ExpProperties.capacity + 1))\n    Simulator.print(\"Removing \" + (pool.genotype_instances - ExpProperties.capacity) + \" genotypes\");\n  while (pool.genotype_instances > ExpProperties.capacity)\n    selectedForDeletionInPool(pool).deleteOne();\n}\n\nfunction ExpProperties_capacity_set()\n{\n  LimitGenePool();\n}\n\nfunction\nExpProperties_cr_c_set, ExpProperties_cr_life_set, ExpProperties_cr_v_set, ExpProperties_cr_gl_set,\nExpProperties_cr_joints_set, ExpProperties_cr_nnsiz_set, ExpProperties_cr_nncon_set, ExpProperties_cr_di_set,\nExpProperties_cr_vpos_set, ExpProperties_cr_vvel_set, ExpProperties_cr_norm_set, ExpProperties_cr_simi_set,\nupdate_fitformula()\n{\n  var formula = \"\" + ExpProperties.cr_c;\n  formula += singlecrit(\"cr_life\", \"lifespan\");\n  formula += singlecrit(\"cr_v\", \"velocity\");\n  formula += singlecrit(\"cr_gl\", \"strsiz\");\n  formula += singlecrit(\"cr_joints\", \"strjoints\");\n  formula += singlecrit(\"cr_nnsiz\", \"nnsiz\");\n  formula += singlecrit(\"cr_nncon\", \"nncon\");\n  formula += singlecrit(\"cr_di\", \"distance\");\n  formula += singlecrit(\"cr_vpos\", \"vertpos\");\n  formula += singlecrit(\"cr_vvel\", \"vertvel\");\n  if (ExpProperties.cr_simi)\n    formula = \"(\" + formula + \")*this.simi\";\n  GenePools[0].fitness = \"return \" + formula + \";\";\n}\n\nfunction singlecrit(crname, fieldname)\n{\n  var weight = ExpProperties.[crname];\n  if (weight == 0.0)\n    return \"\";\n  if (ExpProperties.cr_norm)\n    return \"+this.getNormalized(Genotype:\" + fieldname + \")*\" + weight;\n  else\n    return \"+this.\" + fieldname + \"*\" + weight;\n}\n\nfunction queryEventNames()\n{\n  return [\"Mark start point\", \"Mark target\", \"Place food\", \"Drop food\"];\n}\n\nfunction onUserEvent(type, point, vector)\n{\n  //Simulator.print(\"called event #\"+type);\n  var p = WorldMap.intersect(point, vector);\n  if (p)\n  {\n    //\tSimulator.print(\"intersection found:\"+p[0]+\",\"+p[1]+\",\"+p[2]);\n    if (type == 0)\n    {\n      var cr=addmark(0);\n      startx = p[0] - cr.bboxSize.x / 2;\n      starty = p[1] - cr.bboxSize.y / 2;\n      updateMarks();\n    }\n    if (type == 1)\n    {\n      var cr=addmark(1);\n      targetx = p[0] - cr.bboxSize.x / 2;\n      targety = p[1] - cr.bboxSize.y / 2;\n      updateMarks();\n    }\n    if (type == 2 || type == 3)\n    {\n      var food=addfood();\n      if (food)\n        {\n        var z = p[2];\n        if (type == 3)\n          z += 10;  \n        food.locationSetBboxLow(p[0] - food.bboxSize.x / 2, p[1] - food.bboxSize.y / 2, z);\n        }\n    }\n  }\n  //else\n  //\tSimulator.print(\"no intersection...\");\n}\n\n@include \"standard_loadsave.inc\"\n\n"
  },
  {
    "id": "startxlist",
    "_classname": "property",
    "help": "A comma-separated list of X positions (based on the world map) of starting points",
    "type": "s",
    "name": "Start X positions"
  },
  {
    "id": "startylist",
    "_classname": "property",
    "help": "A comma-separated list of Y positions (based on the world map) of starting points",
    "type": "s",
    "name": "Start Y positions"
  },
  {
    "id": "startheadings",
    "_classname": "property",
    "help": "A comma-separated list of initial headings (in degrees)",
    "type": "s",
    "name": "Start headings"
  },
  {
    "id": "targetxlist",
    "_classname": "property",
    "help": "A comma-separated list of X positions (based on the world map) of target points",
    "type": "s",
    "name": "Target X positions"
  },
  {
    "id": "targetylist",
    "_classname": "property",
    "help": "A comma-separated list of Y positions (based on the world map) of target points",
    "type": "s",
    "name": "Target Y positions"
  },
  {
    "id": "targetradius",
    "_classname": "property",
    "help": "The target is a circle with the radius defined here",
    "type": "f 0.01 10",
    "name": "Target radius"
  },
  {
    "id": "cleardata",
    "_classname": "property",
    "help": "Sets the number of instances of each genotype to zero (as if it has never been evaluated).\nGenotype performance values stay intact, yet they are meaningless if a genotype has no instances.",
    "type": "p",
    "name": "Clear performance info"
  },
  {
    "id": "notes",
    "_classname": "state",
    "help": "You can write anything here\n(it will be saved to the experiment file)",
    "type": "s 1",
    "name": "Notes"
  },
  {
    "id": "totaltestedcr",
    "flags": 16,
    "help": "Total number of the creatures evaluated in the experiment",
    "name": "Evaluated creatures",
    "_classname": "state",
    "type": "d"
  },
  {
    "id": "creaturesgrouploaded",
    "_classname": "state",
    "flags": 34,
    "type": "d",
    "name": "creaturesgrouploaded"
  }
]