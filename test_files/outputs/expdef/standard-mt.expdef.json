[
  {
    "name": "Evolutionary optimization (steady-state), multithreaded",
    "_classname": "expdef",
    "info": "Runs a number of parallelized \"standard\" experiments, migrating the genotypes between Slave simulations. On each migration the genotypes are also merged and transferred to the main simulator.\n\nThe gene pool capacity set in this experiment applies to each parallel simulation, not the main simulation, so the main gene pool will normally contain (N*capacity) genotypes.\n\nChanging the experiment configuration during simulation has no effect - you have to stop/start to transfer the new parameters into the parallelized Slave simulators.\n\nBeware, some advanced features of the \"standard\" experiment might crash or work incorrectly when used in parallelized mode.\n\nRead more about this experiment at http://www.framsticks.com/files/common/ParallelComputingFramsticks.pdf and http://www.framsticks.com/files/common/MultithreadedEvolutionaryDesign.pdf\n",
    "code": "\nglobal SHOULD_STOP;\nglobal g_goal_reached;\nglobal g_starttime, g_slavestart, g_slavetiming;\n\nfunction onExpDefLoad()\n{\n\tSHOULD_STOP = 0;\n\n\tGenePools[0].name = \"Genotypes\";\n\n\tvar p = Populations[0];\n\tp.name = \"Creatures\";\n\tp.nnsim = 1;\n\tp.enableperf = 1;\n\tp.death = 1;\n\tp.energy = 1;\n\tp.selfmask = 0x10001;\n\tp.othermask = 0x20001;\n\n\tp = Populations.addGroup(\"Food\");\n\tp.nnsim = 0;\n\tp.enableperf = 0;\n\tp.death = 1;\n\tp.energy = 1;\n\tp.selfmask = 0x20002;\n\tp.othermask = 0x10002;\n\n\tExpProperties.initialgen = \"X\";\n\tExpProperties.capacity = 200;\n\tExpProperties.delrule = 0;\n\tExpProperties.MaxCreated = 1;\n\tExpProperties.p_nop = 20;\n\tExpProperties.p_mut = 64;\n\tExpProperties.p_xov = 16;\n\tExpProperties.xov_mins = 0;\n\tExpProperties.selrule = 2;\n\tExpProperties.cr_c = 0;\n\tExpProperties.cr_life = 0;\n\tExpProperties.cr_v = 1;\n\tExpProperties.cr_gl = 0;\n\tExpProperties.cr_joints = 0;\n\tExpProperties.cr_nnsiz = 0;\n\tExpProperties.cr_nncon = 0;\n\tExpProperties.cr_di = 0;\n\tExpProperties.cr_vpos = 0;\n\tExpProperties.cr_vvel = 0;\n\tExpProperties.cr_norm = 0;\n\tExpProperties.cr_simi = 0;\n\tExpProperties.Energy0 = 1000;\n\tExpProperties.e_meta = 1;\n\tExpProperties.feed = 0;\n\tExpProperties.feede0 = 200;\n\tExpProperties.feedtrans = 1;\n\tExpProperties.placement = 0;\n\tExpProperties.rotation = 0;\n\tExpProperties.creath = 0.1;\n\tExpProperties.foodgen = \"\";\n\n\tExpProperties.minfitness = 0;\n}\n\nfunction onExpInit()\n{\n\tPopulations[0].clear();\n\tPopulations[1].clear();\n\tGenePools[0].clear();\n\tGenotype.newFromString(ExpProperties.initialgen).moveTo(GenePools[0]);\n\tInterface.makeFrom(ExpState.*).setAllDefault(); //reset all values to 0 unless defaults are defined otherwise\n}\n\nfunction onStep()\n{\n\tSimulator.sleep(10);\n\n\tif (GenePools[0].size == 0) //should be in onStart() but stopping inside onStart() might be dangerous\n\t{\n\t\tSimulator.stop();\n\t\tSimulator.message(\"No genotypes, aborting\", 2);\n\t}\n\n\t//Simulator.print(\"step...\");\n}\n\n// Randomly splits N objects into groups\nfunction randomAllocation(N, num_groups)\n{\n\tvar all = [];\n\tfor (var i = 0; i < N; i++)\n\t\tall[i] = i;\n\tvar ret = [];\n\tfor (var g = 0; g < num_groups; g++)\n\t{\n\t\tvar elems = [];\n\t\tvar number_of_elements = all.size / (num_groups - g);\n\t\tfor (var i = 0; i < number_of_elements; i++)\n\t\t{\n\t\t\tvar e = Math.random(all.size);\n\t\t\telems.add(all[e]);\n\t\t\tall.remove(e);\n\t\t}\n\t\tret.add(elems);\n\t}\n\treturn ret;\n}\n\n// Used in multithreaded Convection Selection, see http://www.framsticks.com/files/common/MultithreadedEvolutionaryDesign.pdf\n// Splits N genotypes into groups based on intervals (\"bands\") of fitness.\n// TODO add shifting (so these intervals are not fixed) and see if that makes any difference (if they are constant, that probably supposedly may sometimes facilitate stagnation within each interval?...)\n// TODO adjust interval widths inv. proportionally to the number of genotypes, to counteract loss of diversity\nfunction intervalEqualWidthAllocation(pool, num_groups)\n{\n\tvar best = pool.best();\n\tvar worst = pool.worst();\n\tvar ret = [];\n\tfor (var g = 0; g < num_groups; g++)\n\t{\n\t\tvar elems = [];\n\t\tvar min = worst.fit2 + (best.fit2 - worst.fit2) * g / num_groups;\n\t\tvar max = worst.fit2 + (best.fit2 - worst.fit2) * (g + 1) / num_groups;\n\t\tfor (var i = 0; i < pool.size; i++)\n\t\t{\n\t\t\tif (pool[i].fit2 >= min && pool[i].fit2 <= max)\n\t\t\t\telems.add(i);\n\t\t}\n\t\tif (elems.size == 0) //no genotypes in this fitness interval?\n\t\t{\n\t\t\tif (g == 0) //is this the first (\"worst\") interval? so the worst genotype is even better and it is \"above\" this interval\n\t\t\t\telems.add(worst.index); //let this slave work on the worst genotype (since we don't want to introduce new genotypes here, like initialgen)\n\t\t\telse\n\t\t\t\telems = ret[ret.size - 1]; //let this slave work on genotypes from the worse interval (try to \"fix the convection gap\")\n\t\t}\n\t\tret.add(elems);\n\t}\n\treturn ret;\n}\n\nfunction compareFitness(g1, g2) //for sorting genotypes in intervalEqualNumberAllocation()\n{\n\treturn g1.fit < g2.fit;\n}\n\nfunction intervalEqualNumberAllocation(pool, num_groups)\n{\n\tvar genos = [];\n\tfor(var g in pool)\n\t\tgenos.add(g);\n\tgenos.sort(function compareFitness);\n\tvar ret = [];\n\tvar from = 0;\n\t//now that we have genotypes sorted according to fitness, we divide the genos vector into num_groups sections (each from..to)\n\tfor(var g = 0; g < num_groups; g++)\n\t{\n\t\tvar elems = [];\n\t\tvar to = genos.size * (g + 1) / num_groups;\n\t\tfor(var e = from; e < to; e++)\n\t\t\telems.add(genos[e].index);\n\t\tfrom = to;\n\t\tret.add(elems);\n\t}\n\treturn ret;\n}\n\n\nfunction onStart()\n{\n\tSHOULD_STOP = 0;\n\tg_starttime = Math.time;\n\tSimulator.slaves.stopAll();\n\tSimulator.slaves.cancelAllEvents();\n\tSimulator.slaves.size = getExpPropertiesThreads();\n\tvar t0 = Math.time;\n\n\tvar exported_settings = Simulator.export(null, 4 + 16 + 32, -1, -1); // -1 = export all groups\n\t//Simulator.print(\"exported=\"+exported_settings);\n\n\tfor (var i = 0; i < Simulator.slaves.size; i++)\n\t{\n\t\tvar s = Simulator.slaves[i];\n\t\ts.expdef = \"standard\";\n\t\ts.import(\"string://\" + exported_settings, 4 + 8 + 16);\n\t}\n\n\tsendToSlaves();\n\tGenePools[0].mergeInstances();\n\tExpState.migration_time += Math.time - t0;\n\tSimulator.slaves.startAll();\n\tg_slavestart = Math.time;\n\tg_slavetiming = Simulator.slaves.size;\n}\n\nfunction onStop()\n{\n\tif (SHOULD_STOP) //stop() was called by our internal stopping condition\n\t{\n\t\tSHOULD_STOP = 0; //\"use\" this value so that it does not persist\n\t\treturn; //slaves are already stopped and loadFromSlaves()'ed, so don't do anything\n\t}\n\tSimulator.slaves.stopAll();\n\tExpState.slave_time += (Math.time - g_slavestart) * g_slavetiming;\n\tg_slavetiming = 0;\n\tSimulator.slaves.cancelAllEvents();\n\tif (ExpProperties.merge_unfinished)\n\t{\n\t\tvar t0 = Math.time;\n\t\tloadFromSlaves();\n\t\tExpState.migration_time += Math.time - t0;\n\t}\n\tExpState.real_time += Math.time - g_starttime;\n}\n\nfunction onSlaveStop()\n{\n\tSimulator.print(\"slave #\" + StopEvent.index + \" stopped\");\n}\n\nfunction exportSelectedGenotypes(selection)\n{\n\tvar f = File.new(); //File.new() creates a new memory file, its content is then returned as a text string upon closing\n\tfor (var i = 0; i < selection.size; i++)\n\t\tf.writeNameObject(\"org\", GenePools[0][selection[i]]);\n\treturn f.close();\n}\n\nfunction loadFromSlaves()\n{\n\tSimulator.print(\"loading genotypes from slaves... (migrations=\" + ExpState.migrations + \")\");\n\tGenePools[0].clear();\n\tfor (var i = 0; i < Simulator.slaves.size; i++)\n\t{\n\t\tvar s = Simulator.slaves[i];\n\t\tvar fromslave = s.export(null, 2, 0, 0);\n\t\tSimulator.import(\"string://\" + fromslave, 2 + 128);\n\t\tExpState.totaltestedcr += s.expstate.totaltestedcr;\n\t\tExpState.totaltests += s.expstate.totaltests;\n\t}\n\tExpState.migrations++;\n\tSimulator.checkpointData(ExpState.migrations);\n\tif (ExpProperties.max_migrations > 0 && ExpState.migrations >= ExpProperties.max_migrations)\n\t\tSHOULD_STOP = 1;\n}\n\nfunction printFitnesses(allocation)\n{\n\tfor (var i = 0; i < allocation.size; i++)\n\t{\n\t\tvar s = \"\";\n\t\tfor(var e = 0; e < allocation[i].size; e++)\n\t\t\ts += \",\" + GenePools[0][allocation[i][e]].fit2;\n\t\tSimulator.print(\"\" + i + \"\\t\" + s);\n\t}\n}\n\nfunction sendToSlaves()\n{\n\tSimulator.print(\"sending genotypes to slaves...\");\n\n\tGenePools[0].splitInstances();\n\n\tvar mixed = []; //mixed[i] = genotypes exported for slave #i\n\n\tif (GenePools[0].size <= ExpProperties.capacity)\n\t{\n\t\t// no need to randomize, each slave gets the complete pool of genotypes. For convection distribution, interval allocations could be used, but this is a rare situation anyway and in this situation sending all genotypes to each slave is not a bad idea\n\t\tvar exported_gen = Simulator.export(null, 2, 0, -1); // 0 = export pool #0\n\t\tfor (var i = 0; i < Simulator.slaves.size; i++)\n\t\t\tmixed[i] = exported_gen;\n\t}\n\telse\n\t{\n\t\t// distribute genotypes\n\t\tvar a = null;\n\t\tif (ExpProperties.distrrule == 0) a = randomAllocation(GenePools[0].size, Simulator.slaves.size);\n\t\t//convection distributions gave better and more interesting results, and facilitated continuous progress - see http://www.framsticks.com/files/common/MultithreadedEvolutionaryDesign.pdf\n\t\tif (ExpProperties.distrrule == 1) a = intervalEqualWidthAllocation(GenePools[0], Simulator.slaves.size);\n\t\tif (ExpProperties.distrrule == 2) a = intervalEqualNumberAllocation(GenePools[0], Simulator.slaves.size);\n\t\t//Simulator.print(\"alloc=\"+a);\n\t\t//printFitnesses(a);\n\t\tfor (var i = 0; i < a.size; i++)\n\t\t\tmixed[i] = exportSelectedGenotypes(a[i]);\n\t}\n\n\t//Simulator.print(\"mixed=\"+mixed);\n\n\tfor (var i = 0; i < Simulator.slaves.size; i++)\n\t{\n\t\tvar s = Simulator.slaves[i];\n\t\ts.genepools[0].clear();\n\t\ts.import(\"string://\" + mixed[i], 2 + 128); // import into slave\n\t\tSimulator.print(\"slave #\" + i + \" has \" + s.genepools[0].size + \" genotypes\");\n\t\ts.genepools[0].mergeInstances();\n\t\ts.expstate.totaltestedcr = 0;\n\t\ts.expstate.totaltests = 0;\n\t}\n\n\tif (ExpProperties.keep_threads_running)\n\t\tg_goal_reached = [0] * Simulator.slaves.size;\n\telse\n\t\tg_goal_reached = null;\n}\n\nfunction testAllGoalsReached()\n{\n\tfor (var v in g_goal_reached)\n\t\tif (!v)\n\t\t\treturn 0;\n\treturn 1;\n}\n\nfunction onSlaveCheckpoint()\n{\n\t//Simulator.print(\"slave #\"+CheckpointEvent.index+\" checkpoint:\"+CheckpointEvent.data);\n\tif (CheckpointEvent.data >= (ExpProperties.capacity * ExpProperties.mix_period / 100)) //desired number of evaluations?\n\t{\n\t\tif (g_goal_reached)\n\t\t{\n\t\t\tif (g_goal_reached[CheckpointEvent.index])\n\t\t\t\treturn ; //already handled\n\n\t\t\tSimulator.print(\"Slave #\" + CheckpointEvent.index + \" \" + CheckpointEvent.data + \" evaluations\");\n\t\t\tg_goal_reached[CheckpointEvent.index] = 1;\n\t\t\tif (testAllGoalsReached())\n\t\t\t{\n\t\t\t\tSimulator.slaves.stopAll();\n\t\t\t\tExpState.slave_time += (Math.time - g_slavestart) * g_slavetiming;\n\t\t\t\tg_slavetiming = 0;\n\t\t\t\tSimulator.slaves.cancelAllEvents();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSimulator.print(\"Slave #\" + CheckpointEvent.index + \" \" + CheckpointEvent.data + \" evaluations, stopping\");\n\t\t\tCheckpointEvent.slave.stop();\n\t\t\tExpState.slave_time += Math.time - g_slavestart;\n\t\t\tg_slavetiming--;\n\t\t\tSimulator.slaves.cancelEventsFromSlave(CheckpointEvent.slave);\n\t\t}\n\n\t\tif (Simulator.running && (Simulator.slaves.running == 0))\n\t\t{\n\t\t\tSimulator.print(\"migrating slave simulations...\");\n\t\t\tvar t0 = Math.time;\n\t\t\tloadFromSlaves(); // may set SHOULD_STOP\n\t\t\tif (SHOULD_STOP)\n\t\t\t{\n\t\t\t\tSimulator.message(\"Done %d migrations, stopping.\" % ExpState.migrations, 0);\n\t\t\t\tSimulator.stop();\n\t\t\t\tGenePools[0].mergeInstances();\n\t\t\t\tExpState.migration_time += Math.time - t0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsendToSlaves();\n\t\t\t\tGenePools[0].mergeInstances();\n\t\t\t\tExpState.migration_time += Math.time - t0;\n\t\t\t\tSimulator.slaves.startAll();\n\t\t\t\tg_slavestart = Math.time;\n\t\t\t\tg_slavetiming = Simulator.slaves.size;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tSimulator.print(\"\" + Simulator.slaves.running + \" still running\");\n\t}\n}\n\n@include \"standard_fitformula.inc\"\n@include \"standard_loadsave.inc\"\n@include \"standard_threads.inc\"\n\n"
  },
  {
    "id": "mix_period",
    "group": "Parallelized",
    "help": "Migrate genotypes after evaluating at least that many creatures in every simulation (percentage of the gene pool capacity)",
    "name": "Migration period",
    "_classname": "property",
    "type": "d 1 100000 1000"
  },
  {
    "id": "max_migrations",
    "group": "Parallelized",
    "help": "Number of migrations after which the experiment will automatically stop. 0 to disable this limit.",
    "name": "Max number of migrations",
    "_classname": "property",
    "type": "d 0 100000 0"
  },
  {
    "id": "distrrule",
    "group": "Parallelized",
    "help": "How to distribute genotypes to slave simulators? For details see http://www.framsticks.com/files/common/MultithreadedEvolutionaryDesign.pdf",
    "name": "Distribution rule",
    "_classname": "property",
    "type": "d 0 2 2 ~Randomly~Convection - fitness intervals (equal fitness width)~Convection - fitness intervals (equal number of genotypes)"
  },
  {
    "id": "keep_threads_running",
    "group": "Parallelized",
    "help": "Keep each thread running after it completes the requested number of evaluations, until all threads do so. Otherwise threads that completed their work will wait for other threads to complete, wasting time but ensuring that each thread evaluates the same number of creatures.",
    "name": "Maximize thread running time",
    "_classname": "property",
    "type": "d 0 1 1"
  },
  {
    "id": "merge_unfinished",
    "group": "Parallelized",
    "help": "Perform final migration when the experiment is stopped: slaves will deliver as much as they were able to evolve so that no work will be wasted.",
    "name": "Merge unfinished results",
    "_classname": "property",
    "type": "d 0 1 1"
  },
  {
    "id": "migration_time",
    "flags": 16,
    "help": "Time spent on migration",
    "name": "Migration time",
    "_classname": "state",
    "type": "f"
  },
  {
    "id": "slave_time",
    "flags": 16,
    "help": "Total time spent by running slaves",
    "name": "Slave working time",
    "_classname": "state",
    "type": "f"
  },
  {
    "id": "real_time",
    "flags": 16,
    "help": "Real time elapsed (stop-start)",
    "name": "Working time",
    "_classname": "state",
    "type": "f"
  },
  {
    "id": "totaltestedcr",
    "flags": 16,
    "help": "Total number of creatures evaluated in the experiment",
    "name": "Evaluated creatures",
    "_classname": "state",
    "type": "d"
  },
  {
    "id": "totaltests",
    "flags": 16,
    "help": "Total number of evaluations in the experiment.\nThis is equivalent to \"Evaluated creatures\" unless multiple evaluation is activated.",
    "name": "Number of evaluations",
    "_classname": "state",
    "type": "d"
  },
  {
    "id": "migrations",
    "flags": 16,
    "help": "Number of migrations",
    "name": "Migrations",
    "_classname": "state",
    "type": "d"
  }
]